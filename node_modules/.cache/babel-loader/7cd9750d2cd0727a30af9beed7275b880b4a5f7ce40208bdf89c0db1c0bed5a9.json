{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\TokenExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = '0x...'; // 새로 배포한 컨트랙트 주소\nconst CONTRACT_ABI = [/* 새로운 ABI */];\nconst ERC20_ABI = [/* ERC20 토큰 ABI */];\nconst TOKENS = {\n  ETH: {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    decimals: 18\n  },\n  gUSDC: {\n    symbol: 'gUSDC',\n    name: 'gUSDC',\n    address: '0x...',\n    decimals: 6\n  },\n  gUSDT: {\n    symbol: 'gUSDT',\n    name: 'gUSDT',\n    address: '0x...',\n    decimals: 6\n  },\n  gKIP: {\n    symbol: 'gKIP',\n    name: 'gKIP',\n    address: '0x...',\n    decimals: 18\n  }\n};\nfunction TokenExchange() {\n  _s();\n  const {\n    active,\n    library,\n    account\n  } = useWeb3React();\n  const [inputToken, setInputToken] = useState('ETH');\n  const [outputToken, setOutputToken] = useState('gKIP');\n  const [inputAmount, setInputAmount] = useState('');\n  const [outputAmount, setOutputAmount] = useState('');\n  const [prices, setPrices] = useState({});\n  const [balances, setBalances] = useState({});\n  const [error, setError] = useState('');\n  useEffect(() => {\n    if (active && library) {\n      updateBalances();\n      fetchPrices();\n    }\n  }, [active, library, account, inputToken]);\n  useEffect(() => {\n    calculateOutputAmount();\n  }, [inputAmount, inputToken, outputToken, prices]);\n  const fetchPrices = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\n      const data = await response.json();\n      setPrices({\n        ETH: data.ethereum.usd,\n        gUSDC: data['usd-coin'].usd,\n        gUSDT: data.tether.usd,\n        gKIP: 0.00012 // Laos Kip 가격은 별도로 찾아야 할 수 있습니다.\n      });\n    } catch (error) {\n      console.error('Failed to fetch prices:', error);\n    }\n  };\n  const calculateOutputAmount = () => {\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) return;\n    const inputValue = parseFloat(inputAmount) * prices[inputToken];\n    const outputValue = inputValue / prices[outputToken];\n    setOutputAmount(outputValue.toFixed(6));\n  };\n  const handleExchange = async () => {\n    if (!active || !library) {\n      alert('Please connect your wallet first');\n      return;\n    }\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\n      setError('Insufficient balance');\n      return;\n    }\n    setError('');\n    try {\n      const signer = library.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      let tx;\n      if (inputToken === 'ETH') {\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\n          value: ethers.utils.parseEther(inputAmount)\n        });\n      } else {\n        const inputTokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        await inputTokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n        tx = await contract.exchangeTokenForToken(TOKENS[inputToken].address, TOKENS[outputToken].address, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n      }\n      await tx.wait();\n      alert('Exchange successful!');\n      updateBalances();\n    } catch (error) {\n      console.error('Exchange failed:', error);\n      alert('Exchange failed. Please check console for details.');\n    }\n  };\n  const updateBalances = async () => {\n    if (!active || !library || !account) return;\n    const newBalances = {};\n    for (const [symbol, token] of Object.entries(TOKENS)) {\n      if (symbol === 'ETH') {\n        const balance = await library.getBalance(account);\n        newBalances[symbol] = ethers.utils.formatEther(balance);\n      } else {\n        // ERC20 토큰 잔액은 아직 구현하지 않습니다.\n        newBalances[symbol] = '0';\n      }\n    }\n    setBalances(newBalances);\n  };\n  const setMaxAmount = () => {\n    if (inputToken === 'ETH') {\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\n    } else {\n      setInputAmount(balances[inputToken]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Token Exchange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: inputToken,\n        onChange: e => setInputToken(e.target.value),\n        className: \"amount-input\",\n        children: Object.keys(TOKENS).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: token,\n          children: TOKENS[token].name\n        }, token, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: inputAmount,\n        onChange: e => {\n          setInputAmount(e.target.value);\n          setError('');\n        },\n        placeholder: \"Input Amount\",\n        className: \"amount-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setMaxAmount,\n        className: \"max-button\",\n        children: \"Max\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Balance: \", parseFloat(balances[inputToken]).toFixed(4), \" \", inputToken]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: outputToken,\n        onChange: e => setOutputToken(e.target.value),\n        className: \"amount-input\",\n        children: Object.keys(TOKENS).filter(token => token !== inputToken).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: token,\n          children: TOKENS[token].name\n        }, token, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: outputAmount,\n        readOnly: true,\n        placeholder: \"Output Amount\",\n        className: \"amount-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExchange,\n      disabled: !active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]),\n      className: \"exchange-button\",\n      children: \"Exchange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenExchange, \"ZYyUoyhwqkVVcWx3gu7RegHtsss=\", false, function () {\n  return [useWeb3React];\n});\n_c = TokenExchange;\nexport default TokenExchange;\nvar _c;\n$RefreshReg$(_c, \"TokenExchange\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","ethers","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","CONTRACT_ABI","ERC20_ABI","TOKENS","ETH","symbol","name","decimals","gUSDC","address","gUSDT","gKIP","TokenExchange","_s","active","library","account","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","prices","setPrices","balances","setBalances","error","setError","updateBalances","fetchPrices","calculateOutputAmount","response","fetch","data","json","ethereum","usd","tether","console","inputValue","parseFloat","outputValue","toFixed","handleExchange","alert","signer","getSigner","contract","Contract","tx","exchangeETHForToken","value","utils","parseEther","inputTokenContract","approve","parseUnits","exchangeTokenForToken","wait","newBalances","token","Object","entries","balance","getBalance","formatEther","setMaxAmount","maxAmount","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","keys","map","type","placeholder","onClick","filter","readOnly","style","color","disabled","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\n\r\nconst CONTRACT_ADDRESS = '0x...'; // 새로 배포한 컨트랙트 주소\r\nconst CONTRACT_ABI = [/* 새로운 ABI */];\r\nconst ERC20_ABI = [/* ERC20 토큰 ABI */];\r\n\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum', decimals: 18 },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x...', decimals: 6 },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0x...', decimals: 6 },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x...', decimals: 18 },\r\n};\r\n\r\nfunction TokenExchange() {\r\n  const { active, library, account } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [prices, setPrices] = useState({});\r\n  const [balances, setBalances] = useState({});\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      updateBalances();\r\n      fetchPrices();\r\n    }\r\n  }, [active, library, account, inputToken]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken, prices]);\r\n\r\n  const fetchPrices = async () => {\r\n    try {\r\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\r\n      const data = await response.json();\r\n      setPrices({\r\n        ETH: data.ethereum.usd,\r\n        gUSDC: data['usd-coin'].usd,\r\n        gUSDT: data.tether.usd,\r\n        gKIP: 0.00012, // Laos Kip 가격은 별도로 찾아야 할 수 있습니다.\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to fetch prices:', error);\r\n    }\r\n  };\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) return;\r\n    const inputValue = parseFloat(inputAmount) * prices[inputToken];\r\n    const outputValue = inputValue / prices[outputToken];\r\n    setOutputAmount(outputValue.toFixed(6));\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!active || !library) {\r\n      alert('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\r\n      setError('Insufficient balance');\r\n      return;\r\n    }\r\n\r\n    setError('');\r\n\r\n    try {\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      let tx;\r\n      if (inputToken === 'ETH') {\r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n      } else {\r\n        const inputTokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        await inputTokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\r\n        tx = await contract.exchangeTokenForToken(\r\n          TOKENS[inputToken].address,\r\n          TOKENS[outputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      }\r\n\r\n      await tx.wait();\r\n      alert('Exchange successful!');\r\n      updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      alert('Exchange failed. Please check console for details.');\r\n    }\r\n  };\r\n\r\n  const updateBalances = async () => {\r\n    if (!active || !library || !account) return;\r\n\r\n    const newBalances = {};\r\n    for (const [symbol, token] of Object.entries(TOKENS)) {\r\n      if (symbol === 'ETH') {\r\n        const balance = await library.getBalance(account);\r\n        newBalances[symbol] = ethers.utils.formatEther(balance);\r\n      } else {\r\n        // ERC20 토큰 잔액은 아직 구현하지 않습니다.\r\n        newBalances[symbol] = '0';\r\n      }\r\n    }\r\n    setBalances(newBalances);\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    if (inputToken === 'ETH') {\r\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\r\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\r\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n    } else {\r\n      setInputAmount(balances[inputToken]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Token Exchange</h2>\r\n      <div className=\"input-container\">\r\n        <select \r\n          value={inputToken} \r\n          onChange={(e) => setInputToken(e.target.value)}\r\n          className=\"amount-input\"\r\n        >\r\n          {Object.keys(TOKENS).map(token => (\r\n            <option key={token} value={token}>{TOKENS[token].name}</option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          value={inputAmount}\r\n          onChange={(e) => {\r\n            setInputAmount(e.target.value);\r\n            setError('');\r\n          }}\r\n          placeholder=\"Input Amount\"\r\n          className=\"amount-input\"\r\n        />\r\n        <button onClick={setMaxAmount} className=\"max-button\">Max</button>\r\n      </div>\r\n      <p>Balance: {parseFloat(balances[inputToken]).toFixed(4)} {inputToken}</p>\r\n      <div className=\"input-container\">\r\n        <select \r\n          value={outputToken} \r\n          onChange={(e) => setOutputToken(e.target.value)}\r\n          className=\"amount-input\"\r\n        >\r\n          {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n            <option key={token} value={token}>{TOKENS[token].name}</option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          value={outputAmount}\r\n          readOnly\r\n          placeholder=\"Output Amount\"\r\n          className=\"amount-input\"\r\n        />\r\n      </div>\r\n      {error && <p style={{color: 'red'}}>{error}</p>}\r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken])}\r\n        className=\"exchange-button\"\r\n      >\r\n        Exchange\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAG,OAAO,CAAC,CAAC;AAClC,MAAMC,YAAY,GAAG,CAAC,cAAc;AACpC,MAAMC,SAAS,GAAG,CAAC,mBAAmB;AAEtC,MAAMC,MAAM,GAAG;EACbC,GAAG,EAAE;IAAEC,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE,UAAU;IAAEC,QAAQ,EAAE;EAAG,CAAC;EACtDC,KAAK,EAAE;IAAEH,MAAM,EAAE,OAAO;IAAEC,IAAI,EAAE,OAAO;IAAEG,OAAO,EAAE,OAAO;IAAEF,QAAQ,EAAE;EAAE,CAAC;EACxEG,KAAK,EAAE;IAAEL,MAAM,EAAE,OAAO;IAAEC,IAAI,EAAE,OAAO;IAAEG,OAAO,EAAE,OAAO;IAAEF,QAAQ,EAAE;EAAE,CAAC;EACxEI,IAAI,EAAE;IAAEN,MAAM,EAAE,MAAM;IAAEC,IAAI,EAAE,MAAM;IAAEG,OAAO,EAAE,OAAO;IAAEF,QAAQ,EAAE;EAAG;AACvE,CAAC;AAED,SAASK,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGpB,YAAY,CAAC,CAAC;EACnD,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,MAAM,CAAC;EACtD,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC+B,MAAM,EAAEC,SAAS,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACiC,QAAQ,EAAEC,WAAW,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACmC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,IAAImB,MAAM,IAAIC,OAAO,EAAE;MACrBgB,cAAc,CAAC,CAAC;MAChBC,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAAClB,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,CAAC,CAAC;EAE1CtB,SAAS,CAAC,MAAM;IACdsC,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACZ,WAAW,EAAEJ,UAAU,EAAEE,WAAW,EAAEM,MAAM,CAAC,CAAC;EAElD,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8FAA8F,CAAC;MAC5H,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCX,SAAS,CAAC;QACRtB,GAAG,EAAEgC,IAAI,CAACE,QAAQ,CAACC,GAAG;QACtB/B,KAAK,EAAE4B,IAAI,CAAC,UAAU,CAAC,CAACG,GAAG;QAC3B7B,KAAK,EAAE0B,IAAI,CAACI,MAAM,CAACD,GAAG;QACtB5B,IAAI,EAAE,OAAO,CAAE;MACjB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI,CAACZ,WAAW,IAAI,CAACI,MAAM,CAACR,UAAU,CAAC,IAAI,CAACQ,MAAM,CAACN,WAAW,CAAC,EAAE;IACjE,MAAMuB,UAAU,GAAGC,UAAU,CAACtB,WAAW,CAAC,GAAGI,MAAM,CAACR,UAAU,CAAC;IAC/D,MAAM2B,WAAW,GAAGF,UAAU,GAAGjB,MAAM,CAACN,WAAW,CAAC;IACpDK,eAAe,CAACoB,WAAW,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EACzC,CAAC;EAED,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAAChC,MAAM,IAAI,CAACC,OAAO,EAAE;MACvBgC,KAAK,CAAC,kCAAkC,CAAC;MACzC;IACF;IAEA,IAAIJ,UAAU,CAACtB,WAAW,CAAC,GAAGsB,UAAU,CAAChB,QAAQ,CAACV,UAAU,CAAC,CAAC,EAAE;MAC9Da,QAAQ,CAAC,sBAAsB,CAAC;MAChC;IACF;IAEAA,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAMkB,MAAM,GAAGjC,OAAO,CAACkC,SAAS,CAAC,CAAC;MAClC,MAAMC,QAAQ,GAAG,IAAIrD,MAAM,CAACsD,QAAQ,CAACnD,gBAAgB,EAAEC,YAAY,EAAE+C,MAAM,CAAC;MAE5E,IAAII,EAAE;MACN,IAAInC,UAAU,KAAK,KAAK,EAAE;QACxBmC,EAAE,GAAG,MAAMF,QAAQ,CAACG,mBAAmB,CAAClD,MAAM,CAACgB,WAAW,CAAC,CAACV,OAAO,EAAE;UACnE6C,KAAK,EAAEzD,MAAM,CAAC0D,KAAK,CAACC,UAAU,CAACnC,WAAW;QAC5C,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAMoC,kBAAkB,GAAG,IAAI5D,MAAM,CAACsD,QAAQ,CAAChD,MAAM,CAACc,UAAU,CAAC,CAACR,OAAO,EAAEP,SAAS,EAAE8C,MAAM,CAAC;QAC7F,MAAMS,kBAAkB,CAACC,OAAO,CAAC1D,gBAAgB,EAAEH,MAAM,CAAC0D,KAAK,CAACI,UAAU,CAACtC,WAAW,EAAElB,MAAM,CAACc,UAAU,CAAC,CAACV,QAAQ,CAAC,CAAC;QACrH6C,EAAE,GAAG,MAAMF,QAAQ,CAACU,qBAAqB,CACvCzD,MAAM,CAACc,UAAU,CAAC,CAACR,OAAO,EAC1BN,MAAM,CAACgB,WAAW,CAAC,CAACV,OAAO,EAC3BZ,MAAM,CAAC0D,KAAK,CAACI,UAAU,CAACtC,WAAW,EAAElB,MAAM,CAACc,UAAU,CAAC,CAACV,QAAQ,CAClE,CAAC;MACH;MAEA,MAAM6C,EAAE,CAACS,IAAI,CAAC,CAAC;MACfd,KAAK,CAAC,sBAAsB,CAAC;MAC7BhB,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxCkB,KAAK,CAAC,oDAAoD,CAAC;IAC7D;EACF,CAAC;EAED,MAAMhB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACjB,MAAM,IAAI,CAACC,OAAO,IAAI,CAACC,OAAO,EAAE;IAErC,MAAM8C,WAAW,GAAG,CAAC,CAAC;IACtB,KAAK,MAAM,CAACzD,MAAM,EAAE0D,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAC9D,MAAM,CAAC,EAAE;MACpD,IAAIE,MAAM,KAAK,KAAK,EAAE;QACpB,MAAM6D,OAAO,GAAG,MAAMnD,OAAO,CAACoD,UAAU,CAACnD,OAAO,CAAC;QACjD8C,WAAW,CAACzD,MAAM,CAAC,GAAGR,MAAM,CAAC0D,KAAK,CAACa,WAAW,CAACF,OAAO,CAAC;MACzD,CAAC,MAAM;QACL;QACAJ,WAAW,CAACzD,MAAM,CAAC,GAAG,GAAG;MAC3B;IACF;IACAuB,WAAW,CAACkC,WAAW,CAAC;EAC1B,CAAC;EAED,MAAMO,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIpD,UAAU,KAAK,KAAK,EAAE;MACxB;MACA,MAAMqD,SAAS,GAAG3B,UAAU,CAAChB,QAAQ,CAACV,UAAU,CAAC,CAAC,GAAG,IAAI;MACzDK,cAAc,CAACgD,SAAS,GAAG,CAAC,GAAGA,SAAS,CAACC,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC;IAC5D,CAAC,MAAM;MACLjD,cAAc,CAACK,QAAQ,CAACV,UAAU,CAAC,CAAC;IACtC;EACF,CAAC;EAED,oBACElB,OAAA;IAAKyE,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjC1E,OAAA;MAAA0E,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvB9E,OAAA;MAAKyE,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B1E,OAAA;QACEuD,KAAK,EAAErC,UAAW;QAClB6D,QAAQ,EAAGC,CAAC,IAAK7D,aAAa,CAAC6D,CAAC,CAACC,MAAM,CAAC1B,KAAK,CAAE;QAC/CkB,SAAS,EAAC,cAAc;QAAAC,QAAA,EAEvBT,MAAM,CAACiB,IAAI,CAAC9E,MAAM,CAAC,CAAC+E,GAAG,CAACnB,KAAK,iBAC5BhE,OAAA;UAAoBuD,KAAK,EAAES,KAAM;UAAAU,QAAA,EAAEtE,MAAM,CAAC4D,KAAK,CAAC,CAACzD;QAAI,GAAxCyD,KAAK;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA4C,CAC/D;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACT9E,OAAA;QACEoF,IAAI,EAAC,QAAQ;QACb7B,KAAK,EAAEjC,WAAY;QACnByD,QAAQ,EAAGC,CAAC,IAAK;UACfzD,cAAc,CAACyD,CAAC,CAACC,MAAM,CAAC1B,KAAK,CAAC;UAC9BxB,QAAQ,CAAC,EAAE,CAAC;QACd,CAAE;QACFsD,WAAW,EAAC,cAAc;QAC1BZ,SAAS,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eACF9E,OAAA;QAAQsF,OAAO,EAAEhB,YAAa;QAACG,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC,eACN9E,OAAA;MAAA0E,QAAA,GAAG,WAAS,EAAC9B,UAAU,CAAChB,QAAQ,CAACV,UAAU,CAAC,CAAC,CAAC4B,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC,EAAC5B,UAAU;IAAA;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1E9E,OAAA;MAAKyE,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B1E,OAAA;QACEuD,KAAK,EAAEnC,WAAY;QACnB2D,QAAQ,EAAGC,CAAC,IAAK3D,cAAc,CAAC2D,CAAC,CAACC,MAAM,CAAC1B,KAAK,CAAE;QAChDkB,SAAS,EAAC,cAAc;QAAAC,QAAA,EAEvBT,MAAM,CAACiB,IAAI,CAAC9E,MAAM,CAAC,CAACmF,MAAM,CAACvB,KAAK,IAAIA,KAAK,KAAK9C,UAAU,CAAC,CAACiE,GAAG,CAACnB,KAAK,iBAClEhE,OAAA;UAAoBuD,KAAK,EAAES,KAAM;UAAAU,QAAA,EAAEtE,MAAM,CAAC4D,KAAK,CAAC,CAACzD;QAAI,GAAxCyD,KAAK;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA4C,CAC/D;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACT9E,OAAA;QACEoF,IAAI,EAAC,QAAQ;QACb7B,KAAK,EAAE/B,YAAa;QACpBgE,QAAQ;QACRH,WAAW,EAAC,eAAe;QAC3BZ,SAAS,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACLhD,KAAK,iBAAI9B,OAAA;MAAGyF,KAAK,EAAE;QAACC,KAAK,EAAE;MAAK,CAAE;MAAAhB,QAAA,EAAE5C;IAAK;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/C9E,OAAA;MACEsF,OAAO,EAAEvC,cAAe;MACxB4C,QAAQ,EAAE,CAAC5E,MAAM,IAAI,CAACO,WAAW,IAAIsB,UAAU,CAACtB,WAAW,CAAC,GAAGsB,UAAU,CAAChB,QAAQ,CAACV,UAAU,CAAC,CAAE;MAChGuD,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC5B;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAChE,EAAA,CApKQD,aAAa;EAAA,QACiBhB,YAAY;AAAA;AAAA+F,EAAA,GAD1C/E,aAAa;AAsKtB,eAAeA,aAAa;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}