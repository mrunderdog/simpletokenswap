{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\TokenExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = '0x0bCADd6FF983B7b31bC8Df0267898b399F71BeD3';\nconst CONTRACT_ABI = [{\n  \"inputs\": [],\n  \"name\": \"exchangeETHForGKIP\",\n  \"outputs\": [],\n  \"stateMutability\": \"payable\",\n  \"type\": \"function\"\n}\n// ... 다른 함수들의 ABI도 포함해야 합니다.\n];\nconst EXCHANGE_RATE = 100; // 1 ETH = 100 gKIP\n\nfunction TokenExchange() {\n  _s();\n  const {\n    active,\n    library,\n    account\n  } = useWeb3React();\n  const [amount, setAmount] = useState('');\n  const [balance, setBalance] = useState('0');\n  const [gkipAmount, setGkipAmount] = useState('0');\n  useEffect(() => {\n    if (active && library) {\n      updateBalance();\n    }\n  }, [active, library, account]);\n  useEffect(() => {\n    // ETH 입력값이 변경될 때마다 gKIP 수량 계산\n    const ethAmount = parseFloat(amount) || 0;\n    const calculatedGkipAmount = ethAmount * EXCHANGE_RATE;\n    setGkipAmount(calculatedGkipAmount.toFixed(2));\n  }, [amount]);\n  const updateBalance = async () => {\n    const balance = await library.getBalance(account);\n    setBalance(ethers.utils.formatEther(balance));\n  };\n  const handleExchange = async () => {\n    if (!active || !library) {\n      alert('Please connect your wallet first');\n      return;\n    }\n    try {\n      const signer = library.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n\n      // ETH를 Wei로 변환\n      const amountInWei = ethers.utils.parseEther(amount);\n\n      // 트랜잭션 실행\n      const tx = await contract.exchangeETHForGKIP({\n        value: amountInWei\n      });\n\n      // 트랜잭션 완료 대기\n      await tx.wait();\n      alert('Exchange successful!');\n      updateBalance();\n    } catch (error) {\n      console.error('Exchange failed:', error);\n      alert('Exchange failed. Please check console for details.');\n    }\n  };\n  const setMaxAmount = () => {\n    // 가스비를 위해 약간의 ETH를 남겨둡니다 (0.01 ETH)\n    const maxAmount = parseFloat(balance) - 0.01;\n    setAmount(maxAmount > 0 ? maxAmount.toString() : '0');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Exchange ETH for gKIP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your ETH Balance: \", parseFloat(balance).toFixed(4), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setMaxAmount,\n        className: \"max-button\",\n        children: \"Max\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        placeholder: \"Amount in ETH\",\n        className: \"amount-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You will receive: \", gkipAmount, \" gKIP\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExchange,\n      disabled: !active || parseFloat(amount) <= 0,\n      className: \"exchange-button\",\n      children: \"Exchange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), active && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenExchange, \"DIG5WjRPiNyQyTeAFvoXbKbx8Eo=\", false, function () {\n  return [useWeb3React];\n});\n_c = TokenExchange;\nexport default TokenExchange;\nvar _c;\n$RefreshReg$(_c, \"TokenExchange\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","ethers","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","CONTRACT_ABI","EXCHANGE_RATE","TokenExchange","_s","active","library","account","amount","setAmount","balance","setBalance","gkipAmount","setGkipAmount","updateBalance","ethAmount","parseFloat","calculatedGkipAmount","toFixed","getBalance","utils","formatEther","handleExchange","alert","signer","getSigner","contract","Contract","amountInWei","parseEther","tx","exchangeETHForGKIP","value","wait","error","console","setMaxAmount","maxAmount","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\n\r\nconst CONTRACT_ADDRESS = '0x0bCADd6FF983B7b31bC8Df0267898b399F71BeD3';\r\nconst CONTRACT_ABI = [\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"exchangeETHForGKIP\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"payable\",\r\n    \"type\": \"function\"\r\n  },\r\n  // ... 다른 함수들의 ABI도 포함해야 합니다.\r\n];\r\n\r\nconst EXCHANGE_RATE = 100; // 1 ETH = 100 gKIP\r\n\r\nfunction TokenExchange() {\r\n  const { active, library, account } = useWeb3React();\r\n  const [amount, setAmount] = useState('');\r\n  const [balance, setBalance] = useState('0');\r\n  const [gkipAmount, setGkipAmount] = useState('0');\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      updateBalance();\r\n    }\r\n  }, [active, library, account]);\r\n\r\n  useEffect(() => {\r\n    // ETH 입력값이 변경될 때마다 gKIP 수량 계산\r\n    const ethAmount = parseFloat(amount) || 0;\r\n    const calculatedGkipAmount = ethAmount * EXCHANGE_RATE;\r\n    setGkipAmount(calculatedGkipAmount.toFixed(2));\r\n  }, [amount]);\r\n\r\n  const updateBalance = async () => {\r\n    const balance = await library.getBalance(account);\r\n    setBalance(ethers.utils.formatEther(balance));\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!active || !library) {\r\n      alert('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      // ETH를 Wei로 변환\r\n      const amountInWei = ethers.utils.parseEther(amount);\r\n\r\n      // 트랜잭션 실행\r\n      const tx = await contract.exchangeETHForGKIP({ value: amountInWei });\r\n      \r\n      // 트랜잭션 완료 대기\r\n      await tx.wait();\r\n\r\n      alert('Exchange successful!');\r\n      updateBalance();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      alert('Exchange failed. Please check console for details.');\r\n    }\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    // 가스비를 위해 약간의 ETH를 남겨둡니다 (0.01 ETH)\r\n    const maxAmount = parseFloat(balance) - 0.01;\r\n    setAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Exchange ETH for gKIP</h2>\r\n      <p>Your ETH Balance: {parseFloat(balance).toFixed(4)} ETH</p>\r\n      <div className=\"input-container\">\r\n        <button onClick={setMaxAmount} className=\"max-button\">Max</button>\r\n        <input\r\n          type=\"number\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          placeholder=\"Amount in ETH\"\r\n          className=\"amount-input\"\r\n        />\r\n      </div>\r\n      <p>You will receive: {gkipAmount} gKIP</p>\r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || parseFloat(amount) <= 0}\r\n        className=\"exchange-button\"\r\n      >\r\n        Exchange\r\n      </button>\r\n      {active && <p>Connected account: {account}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAG,4CAA4C;AACrE,MAAMC,YAAY,GAAG,CACnB;EACE,QAAQ,EAAE,EAAE;EACZ,MAAM,EAAE,oBAAoB;EAC5B,SAAS,EAAE,EAAE;EACb,iBAAiB,EAAE,SAAS;EAC5B,MAAM,EAAE;AACV;AACA;AAAA,CACD;AAED,MAAMC,aAAa,GAAG,GAAG,CAAC,CAAC;;AAE3B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGX,YAAY,CAAC,CAAC;EACnD,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,GAAG,CAAC;EAC3C,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,GAAG,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,IAAIU,MAAM,IAAIC,OAAO,EAAE;MACrBQ,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACT,MAAM,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAC;EAE9BZ,SAAS,CAAC,MAAM;IACd;IACA,MAAMoB,SAAS,GAAGC,UAAU,CAACR,MAAM,CAAC,IAAI,CAAC;IACzC,MAAMS,oBAAoB,GAAGF,SAAS,GAAGb,aAAa;IACtDW,aAAa,CAACI,oBAAoB,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EAChD,CAAC,EAAE,CAACV,MAAM,CAAC,CAAC;EAEZ,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMJ,OAAO,GAAG,MAAMJ,OAAO,CAACa,UAAU,CAACZ,OAAO,CAAC;IACjDI,UAAU,CAACd,MAAM,CAACuB,KAAK,CAACC,WAAW,CAACX,OAAO,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACjB,MAAM,IAAI,CAACC,OAAO,EAAE;MACvBiB,KAAK,CAAC,kCAAkC,CAAC;MACzC;IACF;IAEA,IAAI;MACF,MAAMC,MAAM,GAAGlB,OAAO,CAACmB,SAAS,CAAC,CAAC;MAClC,MAAMC,QAAQ,GAAG,IAAI7B,MAAM,CAAC8B,QAAQ,CAAC3B,gBAAgB,EAAEC,YAAY,EAAEuB,MAAM,CAAC;;MAE5E;MACA,MAAMI,WAAW,GAAG/B,MAAM,CAACuB,KAAK,CAACS,UAAU,CAACrB,MAAM,CAAC;;MAEnD;MACA,MAAMsB,EAAE,GAAG,MAAMJ,QAAQ,CAACK,kBAAkB,CAAC;QAAEC,KAAK,EAAEJ;MAAY,CAAC,CAAC;;MAEpE;MACA,MAAME,EAAE,CAACG,IAAI,CAAC,CAAC;MAEfV,KAAK,CAAC,sBAAsB,CAAC;MAC7BT,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxCX,KAAK,CAAC,oDAAoD,CAAC;IAC7D;EACF,CAAC;EAED,MAAMa,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,MAAMC,SAAS,GAAGrB,UAAU,CAACN,OAAO,CAAC,GAAG,IAAI;IAC5CD,SAAS,CAAC4B,SAAS,GAAG,CAAC,GAAGA,SAAS,CAACC,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC;EACvD,CAAC;EAED,oBACEvC,OAAA;IAAKwC,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjCzC,OAAA;MAAAyC,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B7C,OAAA;MAAAyC,QAAA,GAAG,oBAAkB,EAACxB,UAAU,CAACN,OAAO,CAAC,CAACQ,OAAO,CAAC,CAAC,CAAC,EAAC,MAAI;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7D7C,OAAA;MAAKwC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BzC,OAAA;QAAQ8C,OAAO,EAAET,YAAa;QAACG,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClE7C,OAAA;QACE+C,IAAI,EAAC,QAAQ;QACbd,KAAK,EAAExB,MAAO;QACduC,QAAQ,EAAGC,CAAC,IAAKvC,SAAS,CAACuC,CAAC,CAACC,MAAM,CAACjB,KAAK,CAAE;QAC3CkB,WAAW,EAAC,eAAe;QAC3BX,SAAS,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN7C,OAAA;MAAAyC,QAAA,GAAG,oBAAkB,EAAC5B,UAAU,EAAC,OAAK;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC1C7C,OAAA;MACE8C,OAAO,EAAEvB,cAAe;MACxB6B,QAAQ,EAAE,CAAC9C,MAAM,IAAIW,UAAU,CAACR,MAAM,CAAC,IAAI,CAAE;MAC7C+B,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC5B;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACRvC,MAAM,iBAAIN,OAAA;MAAAyC,QAAA,GAAG,qBAAmB,EAACjC,OAAO;IAAA;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV;AAACxC,EAAA,CAlFQD,aAAa;EAAA,QACiBP,YAAY;AAAA;AAAAwD,EAAA,GAD1CjD,aAAa;AAoFtB,eAAeA,aAAa;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}