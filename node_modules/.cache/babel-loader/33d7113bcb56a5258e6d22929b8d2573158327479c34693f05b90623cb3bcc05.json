{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\TokenExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ERC20_ABI = [\n// 다른 함수들...\n{\n  constant: true,\n  inputs: [{\n    name: \"_owner\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"balance\",\n    type: \"uint256\"\n  }],\n  type: \"function\"\n}, {\n  constant: false,\n  inputs: [{\n    name: \"_spender\",\n    type: \"address\"\n  }, {\n    name: \"_value\",\n    type: \"uint256\"\n  }],\n  name: \"approve\",\n  outputs: [{\n    name: \"\",\n    type: \"bool\"\n  }],\n  type: \"function\"\n}\n// 다른 함수들...\n];\n\n// TOKENS 객체에 각 토큰의 가격 정보를 추가합니다.\nconst TOKENS = {\n  ETH: {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    decimals: 18,\n    price: 1000\n  },\n  gUSDC: {\n    symbol: 'gUSDC',\n    name: 'gUSDC',\n    address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c',\n    decimals: 18,\n    price: 1\n  },\n  gUSDT: {\n    symbol: 'gUSDT',\n    name: 'gUSDT',\n    address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2',\n    decimals: 18,\n    price: 1\n  },\n  gKIP: {\n    symbol: 'gKIP',\n    name: 'gKIP',\n    address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B',\n    decimals: 18,\n    price: 0.00012\n  }\n};\nfunction TokenExchange({\n  checkAndSwitchNetwork,\n  switchToSepolia\n}) {\n  _s();\n  const {\n    active,\n    library,\n    account,\n    chainId\n  } = useWeb3React();\n  const [inputToken, setInputToken] = useState('ETH');\n  const [outputToken, setOutputToken] = useState('gKIP');\n  const [inputAmount, setInputAmount] = useState('0');\n  const [outputAmount, setOutputAmount] = useState('');\n  const [balances, setBalances] = useState({});\n  const [error, setError] = useState('');\n  const [lastPriceUpdate, setLastPriceUpdate] = useState(0);\n  const [isExchanging, setIsExchanging] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const updateBalances = useCallback(async () => {\n    if (!active || !library || !account) return;\n    const newBalances = {};\n    for (const [symbol, token] of Object.entries(TOKENS)) {\n      if (symbol === 'ETH') {\n        const balance = await library.getBalance(account);\n        newBalances[symbol] = ethers.utils.formatEther(balance);\n      } else {\n        try {\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\n          const balance = await tokenContract.balanceOf(account);\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\n        } catch (error) {\n          console.error(`Error fetching balance for ${symbol}:`, error);\n          newBalances[symbol] = '0';\n        }\n      }\n    }\n    setBalances(newBalances);\n  }, [active, library, account]);\n  useEffect(() => {\n    if (active && library) {\n      const init = async () => {\n        const result = await checkAndSwitchNetwork();\n        if (result) {\n          await updateBalances();\n        } else {\n          console.warn('Failed to switch network');\n        }\n      };\n      init();\n    }\n  }, [active, library, checkAndSwitchNetwork, updateBalances]);\n  useEffect(() => {\n    calculateOutputAmount();\n  }, [inputAmount, inputToken, outputToken]);\n  const calculateOutputAmount = () => {\n    if (!inputAmount || !TOKENS[inputToken] || !TOKENS[outputToken]) {\n      setOutputAmount('0.0000');\n      return;\n    }\n\n    // 입력 금액을 Wei 단위로 변환\n    const inputAmountWei = ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals);\n\n    // 입력 토큰의 Wei 단위 가격\n    const inputPriceWei = ethers.utils.parseUnits(TOKENS[inputToken].price.toString(), 18);\n\n    // 출력 토큰의 Wei 단위 가격\n    const outputPriceWei = ethers.utils.parseUnits(TOKENS[outputToken].price.toString(), 18);\n\n    // 입력 금액의 USD 가치 계산 (Wei 단위)\n    const inputValueUSDWei = inputAmountWei.mul(inputPriceWei).div(ethers.utils.parseUnits('1', TOKENS[inputToken].decimals));\n\n    // 출력 금액 계산 (Wei 단위)\n    const outputAmountWei = inputValueUSDWei.mul(ethers.utils.parseUnits('1', TOKENS[outputToken].decimals)).div(outputPriceWei);\n\n    // Wei를 일반 단위로 변환\n    const outputAmount = ethers.utils.formatUnits(outputAmountWei, TOKENS[outputToken].decimals);\n    console.log('Calculation:', {\n      inputAmount,\n      inputToken,\n      outputToken,\n      inputAmountWei: inputAmountWei.toString(),\n      inputPriceWei: inputPriceWei.toString(),\n      outputPriceWei: outputPriceWei.toString(),\n      inputValueUSDWei: inputValueUSDWei.toString(),\n      outputAmountWei: outputAmountWei.toString(),\n      outputAmount\n    });\n    setOutputAmount(parseFloat(outputAmount).toFixed(6));\n  };\n  const handleInputTokenChange = e => {\n    const newInputToken = e.target.value;\n    setInputToken(newInputToken);\n\n    // 입력 토큰이 변경되면 출력 토큰을 자동으로 조정합니다.\n    if (newInputToken === outputToken) {\n      const newOutputToken = Object.keys(TOKENS).find(token => token !== newInputToken);\n      setOutputToken(newOutputToken);\n    }\n\n    // 입력값을 '0'으로 초기화합니다.\n    setInputAmount('0');\n    setOutputAmount('0.0000');\n\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\n  };\n  const handleOutputTokenChange = e => {\n    const newOutputToken = e.target.value;\n    setOutputToken(newOutputToken);\n\n    // 출력 토큰이 변경되면 입력 토큰을 자동으로 조정합니다.\n    if (newOutputToken === inputToken) {\n      const newInputToken = Object.keys(TOKENS).find(token => token !== newOutputToken);\n      setInputToken(newInputToken);\n    }\n\n    // 입력값을 '0'으로 초기화합니다.\n    setInputAmount('0');\n    setOutputAmount('0.0000');\n\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\n  };\n  const handleExchange = async () => {\n    if (!(await checkAndSwitchNetwork())) {\n      return;\n    }\n    if (!active || !library) {\n      setErrorMessage('Please connect your wallet first');\n      return;\n    }\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\n      setErrorMessage('Insufficient balance');\n      return;\n    }\n    setErrorMessage('');\n    setIsExchanging(true);\n    try {\n      const signer = library.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      let tx;\n      if (inputToken === 'ETH') {\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\n          value: ethers.utils.parseEther(inputAmount)\n        });\n      } else if (outputToken === 'ETH') {\n        // ETH로 교환하는 경우, 먼저 토큰 승인이 필요합니다.\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        await tokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n        tx = await contract.exchangeTokenForETH(TOKENS[inputToken].address, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n      } else {\n        // 토큰 간 교환의 경우도 승인이 필요합니다.\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        await tokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n        tx = await contract.exchangeTokens(TOKENS[inputToken].address, TOKENS[outputToken].address, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n      }\n      await tx.wait();\n      alert('Exchange successful!');\n      await updateBalances();\n    } catch (error) {\n      console.error('Exchange failed:', error);\n      if (error.code === 4001) {\n        setErrorMessage('Transaction was rejected. Please try again.');\n      } else if (error.message.includes('insufficient funds')) {\n        setErrorMessage('Insufficient funds for this transaction. Please check your balance.');\n      } else {\n        setErrorMessage('Exchange failed. Please try again or contact support if the issue persists.');\n      }\n    } finally {\n      setIsExchanging(false);\n    }\n  };\n  const setMaxAmount = () => {\n    if (inputToken === 'ETH') {\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\n    } else {\n      setInputAmount(balances[inputToken]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: inputToken,\n            onChange: handleInputTokenChange,\n            children: Object.keys(TOKENS).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: inputAmount,\n          onChange: e => {\n            setInputAmount(e.target.value === '' ? '0' : e.target.value);\n            setError('');\n          },\n          placeholder: \"0.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setMaxAmount,\n          className: \"max-button\",\n          children: \"MAX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"balance\",\n        children: [\"Balance: \", active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000', \" \", inputToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swap-icon\",\n        children: \"\\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: outputToken,\n            onChange: handleOutputTokenChange,\n            children: Object.keys(TOKENS).filter(token => token !== inputToken).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: outputAmount || '0.0000',\n          readOnly: true,\n          placeholder: \"0.0000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExchange,\n      disabled: !active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]) || isExchanging,\n      className: \"swap-button\",\n      children: isExchanging ? 'Exchanging...' : 'Swap'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"price-update\",\n      children: [\"Last price update: \", new Date(lastPriceUpdate).toLocaleTimeString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenExchange, \"tFOQ7OHs7lCO9aLbTw+myonAKLk=\", false, function () {\n  return [useWeb3React];\n});\n_c = TokenExchange;\nexport default TokenExchange;\nvar _c;\n$RefreshReg$(_c, \"TokenExchange\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useWeb3React","ethers","SEPOLIA_CHAIN_ID","CONTRACT_ADDRESS","CONTRACT_ABI","jsxDEV","_jsxDEV","ERC20_ABI","constant","inputs","name","type","outputs","TOKENS","ETH","symbol","decimals","price","gUSDC","address","gUSDT","gKIP","TokenExchange","checkAndSwitchNetwork","switchToSepolia","_s","active","library","account","chainId","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","balances","setBalances","error","setError","lastPriceUpdate","setLastPriceUpdate","isExchanging","setIsExchanging","errorMessage","setErrorMessage","updateBalances","newBalances","token","Object","entries","balance","getBalance","utils","formatEther","tokenContract","Contract","getSigner","balanceOf","formatUnits","console","init","result","warn","calculateOutputAmount","inputAmountWei","parseUnits","inputPriceWei","toString","outputPriceWei","inputValueUSDWei","mul","div","outputAmountWei","log","parseFloat","toFixed","handleInputTokenChange","e","newInputToken","target","value","newOutputToken","keys","find","handleOutputTokenChange","handleExchange","signer","contract","tx","exchangeETHForToken","parseEther","approve","exchangeTokenForETH","exchangeTokens","wait","alert","code","message","includes","setMaxAmount","maxAmount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","placeholder","onClick","filter","readOnly","disabled","Date","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\r\n\r\nconst ERC20_ABI = [\r\n  // 다른 함수들...\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"_owner\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { name: \"_spender\", type: \"address\" },\r\n      { name: \"_value\", type: \"uint256\" }\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [{ name: \"\", type: \"bool\" }],\r\n    type: \"function\"\r\n  },\r\n  // 다른 함수들...\r\n];\r\n\r\n// TOKENS 객체에 각 토큰의 가격 정보를 추가합니다.\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum', decimals: 18, price: 1000 },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c', decimals: 18, price: 1 },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2', decimals: 18, price: 1 },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B', decimals: 18, price: 0.00012 },\r\n};\r\n\r\nfunction TokenExchange({ checkAndSwitchNetwork, switchToSepolia }) {\r\n  const { active, library, account, chainId } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('0');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [balances, setBalances] = useState({});\r\n  const [error, setError] = useState('');\r\n  const [lastPriceUpdate, setLastPriceUpdate] = useState(0);\r\n  const [isExchanging, setIsExchanging] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const updateBalances = useCallback(async () => {\r\n    if (!active || !library || !account) return;\r\n\r\n    const newBalances = {};\r\n    for (const [symbol, token] of Object.entries(TOKENS)) {\r\n      if (symbol === 'ETH') {\r\n        const balance = await library.getBalance(account);\r\n        newBalances[symbol] = ethers.utils.formatEther(balance);\r\n      } else {\r\n        try {\r\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\r\n          const balance = await tokenContract.balanceOf(account);\r\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\r\n        } catch (error) {\r\n          console.error(`Error fetching balance for ${symbol}:`, error);\r\n          newBalances[symbol] = '0';\r\n        }\r\n      }\r\n    }\r\n    setBalances(newBalances);\r\n  }, [active, library, account]);\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      const init = async () => {\r\n        const result = await checkAndSwitchNetwork();\r\n        if (result) {\r\n          await updateBalances();\r\n        } else {\r\n          console.warn('Failed to switch network');\r\n        }\r\n      };\r\n      init();\r\n    }\r\n  }, [active, library, checkAndSwitchNetwork, updateBalances]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken]);\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !TOKENS[inputToken] || !TOKENS[outputToken]) {\r\n      setOutputAmount('0.0000');\r\n      return;\r\n    }\r\n    \r\n    // 입력 금액을 Wei 단위로 변환\r\n    const inputAmountWei = ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals);\r\n    \r\n    // 입력 토큰의 Wei 단위 가격\r\n    const inputPriceWei = ethers.utils.parseUnits(TOKENS[inputToken].price.toString(), 18);\r\n    \r\n    // 출력 토큰의 Wei 단위 가격\r\n    const outputPriceWei = ethers.utils.parseUnits(TOKENS[outputToken].price.toString(), 18);\r\n    \r\n    // 입력 금액의 USD 가치 계산 (Wei 단위)\r\n    const inputValueUSDWei = inputAmountWei.mul(inputPriceWei).div(ethers.utils.parseUnits('1', TOKENS[inputToken].decimals));\r\n    \r\n    // 출력 금액 계산 (Wei 단위)\r\n    const outputAmountWei = inputValueUSDWei.mul(ethers.utils.parseUnits('1', TOKENS[outputToken].decimals)).div(outputPriceWei);\r\n    \r\n    // Wei를 일반 단위로 변환\r\n    const outputAmount = ethers.utils.formatUnits(outputAmountWei, TOKENS[outputToken].decimals);\r\n    \r\n    console.log('Calculation:', { \r\n      inputAmount,\r\n      inputToken,\r\n      outputToken,\r\n      inputAmountWei: inputAmountWei.toString(),\r\n      inputPriceWei: inputPriceWei.toString(),\r\n      outputPriceWei: outputPriceWei.toString(),\r\n      inputValueUSDWei: inputValueUSDWei.toString(),\r\n      outputAmountWei: outputAmountWei.toString(),\r\n      outputAmount\r\n    });\r\n    \r\n    setOutputAmount(parseFloat(outputAmount).toFixed(6));\r\n  };\r\n\r\n  const handleInputTokenChange = (e) => {\r\n    const newInputToken = e.target.value;\r\n    setInputToken(newInputToken);\r\n    \r\n    // 입력 토큰이 변경되면 출력 토큰을 자동으로 조정합니다.\r\n    if (newInputToken === outputToken) {\r\n      const newOutputToken = Object.keys(TOKENS).find(token => token !== newInputToken);\r\n      setOutputToken(newOutputToken);\r\n    }\r\n\r\n    // 입력값을 '0'으로 초기화합니다.\r\n    setInputAmount('0');\r\n    setOutputAmount('0.0000');\r\n\r\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\r\n  };\r\n\r\n  const handleOutputTokenChange = (e) => {\r\n    const newOutputToken = e.target.value;\r\n    setOutputToken(newOutputToken);\r\n    \r\n    // 출력 토큰이 변경되면 입력 토큰을 자동으로 조정합니다.\r\n    if (newOutputToken === inputToken) {\r\n      const newInputToken = Object.keys(TOKENS).find(token => token !== newOutputToken);\r\n      setInputToken(newInputToken);\r\n    }\r\n\r\n    // 입력값을 '0'으로 초기화합니다.\r\n    setInputAmount('0');\r\n    setOutputAmount('0.0000');\r\n\r\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!await checkAndSwitchNetwork()) {\r\n      return;\r\n    }\r\n\r\n    if (!active || !library) {\r\n      setErrorMessage('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\r\n      setErrorMessage('Insufficient balance');\r\n      return;\r\n    }\r\n\r\n    setErrorMessage('');\r\n    setIsExchanging(true);\r\n\r\n    try {\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      let tx;\r\n      if (inputToken === 'ETH') {\r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n      } else if (outputToken === 'ETH') {\r\n        // ETH로 교환하는 경우, 먼저 토큰 승인이 필요합니다.\r\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        await tokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\r\n        \r\n        tx = await contract.exchangeTokenForETH(\r\n          TOKENS[inputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      } else {\r\n        // 토큰 간 교환의 경우도 승인이 필요합니다.\r\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        await tokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\r\n        \r\n        tx = await contract.exchangeTokens(\r\n          TOKENS[inputToken].address,\r\n          TOKENS[outputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      }\r\n\r\n      await tx.wait();\r\n      alert('Exchange successful!');\r\n      await updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      if (error.code === 4001) {\r\n        setErrorMessage('Transaction was rejected. Please try again.');\r\n      } else if (error.message.includes('insufficient funds')) {\r\n        setErrorMessage('Insufficient funds for this transaction. Please check your balance.');\r\n      } else {\r\n        setErrorMessage('Exchange failed. Please try again or contact support if the issue persists.');\r\n      }\r\n    } finally {\r\n      setIsExchanging(false);\r\n    }\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    if (inputToken === 'ETH') {\r\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\r\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\r\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n    } else {\r\n      setInputAmount(balances[inputToken]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Swap</h2>\r\n      <div className=\"swap-box\">\r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={inputToken} \r\n              onChange={handleInputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={inputAmount}\r\n            onChange={(e) => {\r\n              setInputAmount(e.target.value === '' ? '0' : e.target.value);\r\n              setError('');\r\n            }}\r\n            placeholder=\"0.0\"\r\n          />\r\n          <button onClick={setMaxAmount} className=\"max-button\">MAX</button>\r\n        </div>\r\n        <p className=\"balance\">Balance: {active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000'} {inputToken}</p>\r\n        \r\n        <div className=\"swap-icon\">↓</div>\r\n        \r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={outputToken} \r\n              onChange={handleOutputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={outputAmount || '0.0000'}\r\n            readOnly\r\n            placeholder=\"0.0000\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      \r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]) || isExchanging}\r\n        className=\"swap-button\"\r\n      >\r\n        {isExchanging ? 'Exchanging...' : 'Swap'}\r\n      </button>\r\n      \r\n      <p className=\"price-update\">Last price update: {new Date(lastPriceUpdate).toLocaleTimeString()}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}