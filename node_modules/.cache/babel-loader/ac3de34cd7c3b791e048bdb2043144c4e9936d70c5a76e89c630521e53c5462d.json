{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\TokenExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEPOLIA_CHAIN_ID = 11155111;\nconst CONTRACT_ADDRESS = '0x...'; // 새로 배포한 컨트랙트 주소\nconst CONTRACT_ABI = [/* 새로운 ABI */];\nconst ERC20_ABI = [\n// 다른 함수들...\n{\n  constant: true,\n  inputs: [{\n    name: \"_owner\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"balance\",\n    type: \"uint256\"\n  }],\n  type: \"function\"\n}\n// 다른 함수들...\n];\nconst TOKENS = {\n  ETH: {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    decimals: 18\n  },\n  gUSDC: {\n    symbol: 'gUSDC',\n    name: 'gUSDC',\n    address: '0x...',\n    decimals: 6\n  },\n  gUSDT: {\n    symbol: 'gUSDT',\n    name: 'gUSDT',\n    address: '0x...',\n    decimals: 6\n  },\n  gKIP: {\n    symbol: 'gKIP',\n    name: 'gKIP',\n    address: '0x...',\n    decimals: 18\n  }\n};\nfunction TokenExchange({\n  switchToSepolia\n}) {\n  _s();\n  const {\n    active,\n    library,\n    account,\n    chainId\n  } = useWeb3React();\n  const [inputToken, setInputToken] = useState('ETH');\n  const [outputToken, setOutputToken] = useState('gKIP');\n  const [inputAmount, setInputAmount] = useState('');\n  const [outputAmount, setOutputAmount] = useState('');\n  const [prices, setPrices] = useState({});\n  const [balances, setBalances] = useState({});\n  const [error, setError] = useState('');\n  const checkAndSwitchNetwork = async () => {\n    if (chainId !== SEPOLIA_CHAIN_ID) {\n      const userConfirmed = window.confirm(\"This action requires Sepolia network. Do you want to switch to Sepolia?\");\n      if (userConfirmed) {\n        const switched = await switchToSepolia();\n        if (!switched) {\n          alert(\"Failed to switch to Sepolia network. Please try again.\");\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  };\n  useEffect(() => {\n    if (active && library) {\n      checkAndSwitchNetwork().then(result => {\n        if (result) {\n          updateBalances();\n          fetchPrices();\n        }\n      });\n    }\n  }, [active, library, account, chainId]);\n  useEffect(() => {\n    calculateOutputAmount();\n  }, [inputAmount, inputToken, outputToken, prices]);\n  const fetchPrices = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\n      const data = await response.json();\n      setPrices({\n        ETH: data.ethereum.usd,\n        gUSDC: data['usd-coin'].usd,\n        gUSDT: data.tether.usd,\n        gKIP: 0.00012 // Laos Kip 가격은 별도로 찾아야 할 수 있습니다.\n      });\n    } catch (error) {\n      console.error('Failed to fetch prices:', error);\n    }\n  };\n  const calculateOutputAmount = () => {\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) {\n      setOutputAmount('0.0000');\n      return;\n    }\n    const inputValue = parseFloat(inputAmount) * prices[inputToken];\n    const outputValue = inputValue / prices[outputToken];\n    setOutputAmount(outputValue.toFixed(6));\n  };\n  const handleInputTokenChange = async e => {\n    if (await checkAndSwitchNetwork()) {\n      setInputToken(e.target.value);\n    }\n  };\n  const handleOutputTokenChange = async e => {\n    if (await checkAndSwitchNetwork()) {\n      setOutputToken(e.target.value);\n    }\n  };\n  const handleExchange = async () => {\n    if (!(await checkAndSwitchNetwork())) {\n      return;\n    }\n    if (!active || !library) {\n      alert('Please connect your wallet first');\n      return;\n    }\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\n      setError('Insufficient balance');\n      return;\n    }\n    setError('');\n    try {\n      const signer = library.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      let tx;\n      if (inputToken === 'ETH') {\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\n          value: ethers.utils.parseEther(inputAmount)\n        });\n      } else {\n        const inputTokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        await inputTokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n        tx = await contract.exchangeTokenForToken(TOKENS[inputToken].address, TOKENS[outputToken].address, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n      }\n      await tx.wait();\n      alert('Exchange successful!');\n      updateBalances();\n    } catch (error) {\n      console.error('Exchange failed:', error);\n      alert('Exchange failed. Please check console for details.');\n    }\n  };\n  const updateBalances = async () => {\n    if (!active || !library || !account) return;\n    const newBalances = {};\n    for (const [symbol, token] of Object.entries(TOKENS)) {\n      if (symbol === 'ETH') {\n        const balance = await library.getBalance(account);\n        newBalances[symbol] = ethers.utils.formatEther(balance);\n      } else {\n        try {\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\n          const balance = await tokenContract.balanceOf(account);\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\n        } catch (error) {\n          console.error(`Error fetching balance for ${symbol}:`, error);\n          newBalances[symbol] = '0';\n        }\n      }\n    }\n    setBalances(newBalances);\n  };\n  const setMaxAmount = () => {\n    if (inputToken === 'ETH') {\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\n    } else {\n      setInputAmount(balances[inputToken]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: inputToken,\n            onChange: handleInputTokenChange,\n            children: Object.keys(TOKENS).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: inputAmount,\n          onChange: e => {\n            setInputAmount(e.target.value);\n            setError('');\n          },\n          placeholder: \"0.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setMaxAmount,\n          className: \"max-button\",\n          children: \"MAX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"balance\",\n        children: [\"Balance: \", active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000', \" \", inputToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swap-icon\",\n        children: \"\\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: outputToken,\n            onChange: handleOutputTokenChange,\n            children: Object.keys(TOKENS).filter(token => token !== inputToken).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: outputAmount || '0.0000',\n          readOnly: true,\n          placeholder: \"0.0000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"balance\",\n        children: [\"Balance: \", parseFloat(balances[outputToken] || '0').toFixed(4), \" \", outputToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExchange,\n      disabled: !active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]),\n      className: \"swap-button\",\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenExchange, \"Dp17vrCEfdzzfgz/mwOaLxhxlVU=\", false, function () {\n  return [useWeb3React];\n});\n_c = TokenExchange;\nexport default TokenExchange;\nvar _c;\n$RefreshReg$(_c, \"TokenExchange\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","ethers","jsxDEV","_jsxDEV","SEPOLIA_CHAIN_ID","CONTRACT_ADDRESS","CONTRACT_ABI","ERC20_ABI","constant","inputs","name","type","outputs","TOKENS","ETH","symbol","decimals","gUSDC","address","gUSDT","gKIP","TokenExchange","switchToSepolia","_s","active","library","account","chainId","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","prices","setPrices","balances","setBalances","error","setError","checkAndSwitchNetwork","userConfirmed","window","confirm","switched","alert","then","result","updateBalances","fetchPrices","calculateOutputAmount","response","fetch","data","json","ethereum","usd","tether","console","inputValue","parseFloat","outputValue","toFixed","handleInputTokenChange","e","target","value","handleOutputTokenChange","handleExchange","signer","getSigner","contract","Contract","tx","exchangeETHForToken","utils","parseEther","inputTokenContract","approve","parseUnits","exchangeTokenForToken","wait","newBalances","token","Object","entries","balance","getBalance","formatEther","tokenContract","balanceOf","formatUnits","setMaxAmount","maxAmount","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","keys","map","placeholder","onClick","filter","readOnly","disabled","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\n\r\nconst SEPOLIA_CHAIN_ID = 11155111;\r\n\r\nconst CONTRACT_ADDRESS = '0x...'; // 새로 배포한 컨트랙트 주소\r\nconst CONTRACT_ABI = [/* 새로운 ABI */];\r\nconst ERC20_ABI = [\r\n  // 다른 함수들...\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"_owner\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\r\n    type: \"function\",\r\n  },\r\n  // 다른 함수들...\r\n];\r\n\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum', decimals: 18 },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x...', decimals: 6 },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0x...', decimals: 6 },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x...', decimals: 18 },\r\n};\r\n\r\nfunction TokenExchange({ switchToSepolia }) {\r\n  const { active, library, account, chainId } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [prices, setPrices] = useState({});\r\n  const [balances, setBalances] = useState({});\r\n  const [error, setError] = useState('');\r\n\r\n  const checkAndSwitchNetwork = async () => {\r\n    if (chainId !== SEPOLIA_CHAIN_ID) {\r\n      const userConfirmed = window.confirm(\"This action requires Sepolia network. Do you want to switch to Sepolia?\");\r\n      if (userConfirmed) {\r\n        const switched = await switchToSepolia();\r\n        if (!switched) {\r\n          alert(\"Failed to switch to Sepolia network. Please try again.\");\r\n          return false;\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      checkAndSwitchNetwork().then((result) => {\r\n        if (result) {\r\n          updateBalances();\r\n          fetchPrices();\r\n        }\r\n      });\r\n    }\r\n  }, [active, library, account, chainId]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken, prices]);\r\n\r\n  const fetchPrices = async () => {\r\n    try {\r\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\r\n      const data = await response.json();\r\n      setPrices({\r\n        ETH: data.ethereum.usd,\r\n        gUSDC: data['usd-coin'].usd,\r\n        gUSDT: data.tether.usd,\r\n        gKIP: 0.00012, // Laos Kip 가격은 별도로 찾아야 할 수 있습니다.\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to fetch prices:', error);\r\n    }\r\n  };\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) {\r\n      setOutputAmount('0.0000');\r\n      return;\r\n    }\r\n    const inputValue = parseFloat(inputAmount) * prices[inputToken];\r\n    const outputValue = inputValue / prices[outputToken];\r\n    setOutputAmount(outputValue.toFixed(6));\r\n  };\r\n\r\n  const handleInputTokenChange = async (e) => {\r\n    if (await checkAndSwitchNetwork()) {\r\n      setInputToken(e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleOutputTokenChange = async (e) => {\r\n    if (await checkAndSwitchNetwork()) {\r\n      setOutputToken(e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!await checkAndSwitchNetwork()) {\r\n      return;\r\n    }\r\n\r\n    if (!active || !library) {\r\n      alert('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\r\n      setError('Insufficient balance');\r\n      return;\r\n    }\r\n\r\n    setError('');\r\n\r\n    try {\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      let tx;\r\n      if (inputToken === 'ETH') {\r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n      } else {\r\n        const inputTokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        await inputTokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\r\n        tx = await contract.exchangeTokenForToken(\r\n          TOKENS[inputToken].address,\r\n          TOKENS[outputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      }\r\n\r\n      await tx.wait();\r\n      alert('Exchange successful!');\r\n      updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      alert('Exchange failed. Please check console for details.');\r\n    }\r\n  };\r\n\r\n  const updateBalances = async () => {\r\n    if (!active || !library || !account) return;\r\n\r\n    const newBalances = {};\r\n    for (const [symbol, token] of Object.entries(TOKENS)) {\r\n      if (symbol === 'ETH') {\r\n        const balance = await library.getBalance(account);\r\n        newBalances[symbol] = ethers.utils.formatEther(balance);\r\n      } else {\r\n        try {\r\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\r\n          const balance = await tokenContract.balanceOf(account);\r\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\r\n        } catch (error) {\r\n          console.error(`Error fetching balance for ${symbol}:`, error);\r\n          newBalances[symbol] = '0';\r\n        }\r\n      }\r\n    }\r\n    setBalances(newBalances);\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    if (inputToken === 'ETH') {\r\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\r\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\r\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n    } else {\r\n      setInputAmount(balances[inputToken]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Swap</h2>\r\n      <div className=\"swap-box\">\r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={inputToken} \r\n              onChange={handleInputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={inputAmount}\r\n            onChange={(e) => {\r\n              setInputAmount(e.target.value);\r\n              setError('');\r\n            }}\r\n            placeholder=\"0.0\"\r\n          />\r\n          <button onClick={setMaxAmount} className=\"max-button\">MAX</button>\r\n        </div>\r\n        <p className=\"balance\">Balance: {active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000'} {inputToken}</p>\r\n        \r\n        <div className=\"swap-icon\">↓</div>\r\n        \r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={outputToken} \r\n              onChange={handleOutputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={outputAmount || '0.0000'}\r\n            readOnly\r\n            placeholder=\"0.0000\"\r\n          />\r\n        </div>\r\n        <p className=\"balance\">Balance: {parseFloat(balances[outputToken] || '0').toFixed(4)} {outputToken}</p>\r\n      </div>\r\n      \r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      \r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken])}\r\n        className=\"swap-button\"\r\n      >\r\n        Swap\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}