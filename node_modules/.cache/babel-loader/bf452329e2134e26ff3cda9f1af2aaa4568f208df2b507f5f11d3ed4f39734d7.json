{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\TokenExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ERC20_ABI = [\n// 다른 함수들...\n{\n  constant: true,\n  inputs: [{\n    name: \"_owner\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"balance\",\n    type: \"uint256\"\n  }],\n  type: \"function\"\n}\n// 다른 함수들...\n];\nconst TOKENS = {\n  ETH: {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    decimals: 18\n  },\n  gUSDC: {\n    symbol: 'gUSDC',\n    name: 'gUSDC',\n    address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c',\n    decimals: 18\n  },\n  gUSDT: {\n    symbol: 'gUSDT',\n    name: 'gUSDT',\n    address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2',\n    decimals: 18\n  },\n  gKIP: {\n    symbol: 'gKIP',\n    name: 'gKIP',\n    address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B',\n    decimals: 18\n  }\n};\nfunction TokenExchange({\n  checkAndSwitchNetwork,\n  switchToSepolia\n}) {\n  _s();\n  const {\n    active,\n    library,\n    account,\n    chainId\n  } = useWeb3React();\n  const [inputToken, setInputToken] = useState('ETH');\n  const [outputToken, setOutputToken] = useState('gKIP');\n  const [inputAmount, setInputAmount] = useState('');\n  const [outputAmount, setOutputAmount] = useState('');\n  const [prices, setPrices] = useState({});\n  const [balances, setBalances] = useState({});\n  const [error, setError] = useState('');\n  const [lastPriceUpdate, setLastPriceUpdate] = useState(0);\n  useEffect(() => {\n    if (active && library) {\n      checkAndSwitchNetwork().then(result => {\n        if (result) {\n          updateBalances();\n          fetchPrices(); // 가격 정보를 가져옵니다.\n        }\n      });\n    }\n  }, [active, library, account, chainId, checkAndSwitchNetwork]);\n  useEffect(() => {\n    calculateOutputAmount();\n  }, [inputAmount, inputToken, outputToken, prices]);\n  const fetchPrices = async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\n      const data = await response.json();\n      const newPrices = {\n        ETH: data.ethereum.usd,\n        gUSDC: data['usd-coin'].usd,\n        gUSDT: data.tether.usd,\n        gKIP: 0.00012 // gKIP 가격은 여전히 고정값 사용\n      };\n      setPrices(newPrices);\n      setLastPriceUpdate(Date.now());\n      return newPrices; // 여기서 newPrices를 반환합니다.\n    } catch (error) {\n      console.error('Failed to fetch prices:', error);\n      // 오류 발생 시 기본 가격을 반환합니다.\n      return {\n        ETH: 1000,\n        // 예시 가격\n        gUSDC: 1,\n        gUSDT: 1,\n        gKIP: 0.00012\n      };\n    }\n  };\n  const calculateOutputAmount = () => {\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) {\n      setOutputAmount('0.0000');\n      return;\n    }\n    const inputValueUSD = parseFloat(inputAmount) * prices[inputToken];\n    const outputValue = inputValueUSD / prices[outputToken];\n    setOutputAmount(outputValue.toFixed(6));\n  };\n  const handleInputTokenChange = async e => {\n    if (await checkAndSwitchNetwork()) {\n      setInputToken(e.target.value);\n    }\n  };\n  const handleOutputTokenChange = async e => {\n    if (await checkAndSwitchNetwork()) {\n      setOutputToken(e.target.value);\n    }\n  };\n  const handleExchange = async () => {\n    if (!(await checkAndSwitchNetwork())) {\n      return;\n    }\n    if (!active || !library) {\n      alert('Please connect your wallet first');\n      return;\n    }\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\n      setError('Insufficient balance');\n      return;\n    }\n    setError('');\n    try {\n      // 교환 직전에 가격 업데이트\n      const latestPrices = await fetchPrices();\n      const signer = library.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n\n      // 스마트 컨트랙트에 가격 업데이트\n      await contract.updatePrices(ethers.utils.parseUnits(latestPrices.ETH.toString(), 18), ethers.utils.parseUnits(latestPrices.gUSDC.toString(), 18), ethers.utils.parseUnits(latestPrices.gUSDT.toString(), 18), ethers.utils.parseUnits(latestPrices.gKIP.toString(), 18));\n      let tx;\n      if (inputToken === 'ETH') {\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\n          value: ethers.utils.parseEther(inputAmount)\n        });\n      } else if (outputToken === 'ETH') {\n        tx = await contract.exchangeTokenForETH(TOKENS[inputToken].address, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n      } else {\n        tx = await contract.exchangeTokens(TOKENS[inputToken].address, TOKENS[outputToken].address, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n      }\n      await tx.wait();\n      alert('Exchange successful!');\n      updateBalances();\n    } catch (error) {\n      console.error('Exchange failed:', error);\n      if (error.code === 4001) {\n        alert('Transaction was rejected by the user');\n      } else if (error.message.includes('insufficient funds')) {\n        alert('Insufficient funds for this transaction');\n      } else {\n        alert('Exchange failed. Please check console for details.');\n      }\n    }\n  };\n  const updateBalances = async () => {\n    if (!active || !library || !account) return;\n    const newBalances = {};\n    for (const [symbol, token] of Object.entries(TOKENS)) {\n      if (symbol === 'ETH') {\n        const balance = await library.getBalance(account);\n        newBalances[symbol] = ethers.utils.formatEther(balance);\n      } else {\n        try {\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\n          const balance = await tokenContract.balanceOf(account);\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\n        } catch (error) {\n          console.error(`Error fetching balance for ${symbol}:`, error);\n          newBalances[symbol] = '0';\n        }\n      }\n    }\n    setBalances(newBalances);\n  };\n  const setMaxAmount = () => {\n    if (inputToken === 'ETH') {\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\n    } else {\n      setInputAmount(balances[inputToken]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: inputToken,\n            onChange: handleInputTokenChange,\n            children: Object.keys(TOKENS).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: inputAmount,\n          onChange: e => {\n            setInputAmount(e.target.value);\n            setError('');\n          },\n          placeholder: \"0.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setMaxAmount,\n          className: \"max-button\",\n          children: \"MAX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"balance\",\n        children: [\"Balance: \", active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000', \" \", inputToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swap-icon\",\n        children: \"\\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: outputToken,\n            onChange: handleOutputTokenChange,\n            children: Object.keys(TOKENS).filter(token => token !== inputToken).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: outputAmount || '0.0000',\n          readOnly: true,\n          placeholder: \"0.0000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExchange,\n      disabled: !active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]),\n      className: \"swap-button\",\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"price-update\",\n      children: [\"Last price update: \", new Date(lastPriceUpdate).toLocaleTimeString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenExchange, \"4RJkW6OwdyVKtZrqVzwuW9FRfUs=\", false, function () {\n  return [useWeb3React];\n});\n_c = TokenExchange;\nexport default TokenExchange;\nvar _c;\n$RefreshReg$(_c, \"TokenExchange\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","ethers","SEPOLIA_CHAIN_ID","CONTRACT_ADDRESS","CONTRACT_ABI","jsxDEV","_jsxDEV","ERC20_ABI","constant","inputs","name","type","outputs","TOKENS","ETH","symbol","decimals","gUSDC","address","gUSDT","gKIP","TokenExchange","checkAndSwitchNetwork","switchToSepolia","_s","active","library","account","chainId","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","prices","setPrices","balances","setBalances","error","setError","lastPriceUpdate","setLastPriceUpdate","then","result","updateBalances","fetchPrices","calculateOutputAmount","response","fetch","data","json","newPrices","ethereum","usd","tether","Date","now","console","inputValueUSD","parseFloat","outputValue","toFixed","handleInputTokenChange","e","target","value","handleOutputTokenChange","handleExchange","alert","latestPrices","signer","getSigner","contract","Contract","updatePrices","utils","parseUnits","toString","tx","exchangeETHForToken","parseEther","exchangeTokenForETH","exchangeTokens","wait","code","message","includes","newBalances","token","Object","entries","balance","getBalance","formatEther","tokenContract","balanceOf","formatUnits","setMaxAmount","maxAmount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","keys","map","placeholder","onClick","filter","readOnly","disabled","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\r\n\r\nconst ERC20_ABI = [\r\n  // 다른 함수들...\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"_owner\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\r\n    type: \"function\",\r\n  },\r\n  // 다른 함수들...\r\n];\r\n\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum', decimals: 18 },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c', decimals: 18 },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2', decimals: 18 },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B', decimals: 18 },\r\n};\r\n\r\nfunction TokenExchange({ checkAndSwitchNetwork, switchToSepolia }) {\r\n  const { active, library, account, chainId } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [prices, setPrices] = useState({});\r\n  const [balances, setBalances] = useState({});\r\n  const [error, setError] = useState('');\r\n  const [lastPriceUpdate, setLastPriceUpdate] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      checkAndSwitchNetwork().then((result) => {\r\n        if (result) {\r\n          updateBalances();\r\n          fetchPrices(); // 가격 정보를 가져옵니다.\r\n        }\r\n      });\r\n    }\r\n  }, [active, library, account, chainId, checkAndSwitchNetwork]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken, prices]);\r\n\r\n  const fetchPrices = async () => {\r\n    try {\r\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\r\n      const data = await response.json();\r\n      const newPrices = {\r\n        ETH: data.ethereum.usd,\r\n        gUSDC: data['usd-coin'].usd,\r\n        gUSDT: data.tether.usd,\r\n        gKIP: 0.00012, // gKIP 가격은 여전히 고정값 사용\r\n      };\r\n      setPrices(newPrices);\r\n      setLastPriceUpdate(Date.now());\r\n      return newPrices; // 여기서 newPrices를 반환합니다.\r\n    } catch (error) {\r\n      console.error('Failed to fetch prices:', error);\r\n      // 오류 발생 시 기본 가격을 반환합니다.\r\n      return {\r\n        ETH: 1000, // 예시 가격\r\n        gUSDC: 1,\r\n        gUSDT: 1,\r\n        gKIP: 0.00012\r\n      };\r\n    }\r\n  };\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) {\r\n      setOutputAmount('0.0000');\r\n      return;\r\n    }\r\n    const inputValueUSD = parseFloat(inputAmount) * prices[inputToken];\r\n    const outputValue = inputValueUSD / prices[outputToken];\r\n    setOutputAmount(outputValue.toFixed(6));\r\n  };\r\n\r\n  const handleInputTokenChange = async (e) => {\r\n    if (await checkAndSwitchNetwork()) {\r\n      setInputToken(e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleOutputTokenChange = async (e) => {\r\n    if (await checkAndSwitchNetwork()) {\r\n      setOutputToken(e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!await checkAndSwitchNetwork()) {\r\n      return;\r\n    }\r\n\r\n    if (!active || !library) {\r\n      alert('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\r\n      setError('Insufficient balance');\r\n      return;\r\n    }\r\n\r\n    setError('');\r\n\r\n    try {\r\n      // 교환 직전에 가격 업데이트\r\n      const latestPrices = await fetchPrices();\r\n\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      // 스마트 컨트랙트에 가격 업데이트\r\n      await contract.updatePrices(\r\n        ethers.utils.parseUnits(latestPrices.ETH.toString(), 18),\r\n        ethers.utils.parseUnits(latestPrices.gUSDC.toString(), 18),\r\n        ethers.utils.parseUnits(latestPrices.gUSDT.toString(), 18),\r\n        ethers.utils.parseUnits(latestPrices.gKIP.toString(), 18)\r\n      );\r\n\r\n      let tx;\r\n      if (inputToken === 'ETH') {\r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n      } else if (outputToken === 'ETH') {\r\n        tx = await contract.exchangeTokenForETH(\r\n          TOKENS[inputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      } else {\r\n        tx = await contract.exchangeTokens(\r\n          TOKENS[inputToken].address,\r\n          TOKENS[outputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      }\r\n\r\n      await tx.wait();\r\n      alert('Exchange successful!');\r\n      updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      if (error.code === 4001) {\r\n        alert('Transaction was rejected by the user');\r\n      } else if (error.message.includes('insufficient funds')) {\r\n        alert('Insufficient funds for this transaction');\r\n      } else {\r\n        alert('Exchange failed. Please check console for details.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateBalances = async () => {\r\n    if (!active || !library || !account) return;\r\n\r\n    const newBalances = {};\r\n    for (const [symbol, token] of Object.entries(TOKENS)) {\r\n      if (symbol === 'ETH') {\r\n        const balance = await library.getBalance(account);\r\n        newBalances[symbol] = ethers.utils.formatEther(balance);\r\n      } else {\r\n        try {\r\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\r\n          const balance = await tokenContract.balanceOf(account);\r\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\r\n        } catch (error) {\r\n          console.error(`Error fetching balance for ${symbol}:`, error);\r\n          newBalances[symbol] = '0';\r\n        }\r\n      }\r\n    }\r\n    setBalances(newBalances);\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    if (inputToken === 'ETH') {\r\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\r\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\r\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n    } else {\r\n      setInputAmount(balances[inputToken]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Swap</h2>\r\n      <div className=\"swap-box\">\r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={inputToken} \r\n              onChange={handleInputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={inputAmount}\r\n            onChange={(e) => {\r\n              setInputAmount(e.target.value);\r\n              setError('');\r\n            }}\r\n            placeholder=\"0.0\"\r\n          />\r\n          <button onClick={setMaxAmount} className=\"max-button\">MAX</button>\r\n        </div>\r\n        <p className=\"balance\">Balance: {active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000'} {inputToken}</p>\r\n        \r\n        <div className=\"swap-icon\">↓</div>\r\n        \r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={outputToken} \r\n              onChange={handleOutputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={outputAmount || '0.0000'}\r\n            readOnly\r\n            placeholder=\"0.0000\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      \r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken])}\r\n        className=\"swap-button\"\r\n      >\r\n        Swap\r\n      </button>\r\n      \r\n      <p className=\"price-update\">Last price update: {new Date(lastPriceUpdate).toLocaleTimeString()}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}