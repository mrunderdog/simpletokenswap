{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{useWeb3React}from'@web3-react/core';import{ethers}from'ethers';import{SEPOLIA_CHAIN_ID,CONTRACT_ADDRESS,CONTRACT_ABI}from'../App';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ERC20_ABI=[// 다른 함수들...\n{constant:true,inputs:[{name:\"_owner\",type:\"address\"}],name:\"balanceOf\",outputs:[{name:\"balance\",type:\"uint256\"}],type:\"function\"},{constant:false,inputs:[{name:\"_spender\",type:\"address\"},{name:\"_value\",type:\"uint256\"}],name:\"approve\",outputs:[{name:\"\",type:\"bool\"}],type:\"function\"},{constant:true,inputs:[{name:\"_owner\",type:\"address\"},{name:\"_spender\",type:\"address\"}],name:\"allowance\",outputs:[{name:\"remaining\",type:\"uint256\"}],type:\"function\"}// 다른 함수들...\n];// TOKENS 객체에 각 토큰의 가격 정보를 추가합니다.\nconst TOKENS={ETH:{symbol:'ETH',name:'Ethereum',decimals:18,price:1000},gUSDC:{symbol:'gUSDC',name:'gUSDC',address:'0x37B118a528AAD5a22259AFfa21c34254fDa2B60c',decimals:18,price:1},gUSDT:{symbol:'gUSDT',name:'gUSDT',address:'0xeB06441f880F5948e80Ae62042687b4dE22124f2',decimals:18,price:1},gKIP:{symbol:'gKIP',name:'gKIP',address:'0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B',decimals:18,price:0.00012}};function TokenExchange(_ref){let{checkAndSwitchNetwork,switchToSepolia}=_ref;const{active,library,account,chainId}=useWeb3React();const[inputToken,setInputToken]=useState('ETH');const[outputToken,setOutputToken]=useState('gKIP');const[inputAmount,setInputAmount]=useState('0');const[outputAmount,setOutputAmount]=useState('');const[balances,setBalances]=useState({});const[error,setError]=useState('');const[isExchanging,setIsExchanging]=useState(false);const[errorMessage,setErrorMessage]=useState('');const updateBalances=useCallback(async()=>{if(!active||!library||!account)return;const newBalances={};for(const[symbol,token]of Object.entries(TOKENS)){if(symbol==='ETH'){const balance=await library.getBalance(account);newBalances[symbol]=ethers.utils.formatEther(balance);}else{try{const tokenContract=new ethers.Contract(token.address,ERC20_ABI,library.getSigner());const balance=await tokenContract.balanceOf(account);newBalances[symbol]=ethers.utils.formatUnits(balance,token.decimals);}catch(error){console.error(`Error fetching balance for ${symbol}:`,error);newBalances[symbol]='0';}}}setBalances(newBalances);},[active,library,account]);useEffect(()=>{if(active&&library){const init=async()=>{const result=await checkAndSwitchNetwork();if(result){await updateBalances();}else{console.warn('Failed to switch network');}};init();}},[active,library,checkAndSwitchNetwork,updateBalances]);useEffect(()=>{calculateOutputAmount();},[inputAmount,inputToken,outputToken]);const calculateOutputAmount=()=>{if(!inputAmount||!TOKENS[inputToken]||!TOKENS[outputToken]){setOutputAmount('0.0000');return;}const inputValue=parseFloat(inputAmount);let outputAmount;if(inputToken==='ETH'){if(outputToken==='gUSDC'||outputToken==='gUSDT'){// ETH to USDC/USDT: 1:1 ratio\noutputAmount=inputValue;}else if(outputToken==='gKIP'){// ETH to gKIP: 0.001 ETH = 8.333333333 gKIP\noutputAmount=inputValue/0.001*8.333333333;}}else if(outputToken==='ETH'){if(inputToken==='gUSDC'||inputToken==='gUSDT'){// USDC/USDT to ETH: 1:1 ratio\noutputAmount=inputValue;}else if(inputToken==='gKIP'){// gKIP to ETH: 8.333333333 gKIP = 0.001 ETH\noutputAmount=inputValue/8.333333333*0.001;}}else{// Token to Token exchanges\nlet ethValue;if(inputToken==='gUSDC'||inputToken==='gUSDT'){ethValue=inputValue;}else if(inputToken==='gKIP'){ethValue=inputValue/8.333333333*0.001;}if(outputToken==='gUSDC'||outputToken==='gUSDT'){outputAmount=ethValue;}else if(outputToken==='gKIP'){outputAmount=ethValue/0.001*8.333333333;}}console.log('Calculation:',{inputAmount,inputToken,outputToken,outputAmount});setOutputAmount(outputAmount.toFixed(6));};const handleInputTokenChange=e=>{const newInputToken=e.target.value;setInputToken(newInputToken);// 입력 토큰이 변경되면 출력 토큰을 자동으로 조정합니다.\nif(newInputToken===outputToken){const newOutputToken=Object.keys(TOKENS).find(token=>token!==newInputToken);setOutputToken(newOutputToken);}// 입력값을 '0'으로 초기화합니다.\nsetInputAmount('0');setOutputAmount('0.0000');// 네트워크 체크는 별도의 useEffect에서 처리합니다.\n};const handleOutputTokenChange=e=>{const newOutputToken=e.target.value;setOutputToken(newOutputToken);// 출력 토큰이 변경되면 입력 토큰을 자동으로 조정합니다.\nif(newOutputToken===inputToken){const newInputToken=Object.keys(TOKENS).find(token=>token!==newOutputToken);setInputToken(newInputToken);}// 입력값을 '0'으로 초기화합니다.\nsetInputAmount('0');setOutputAmount('0.0000');// 네트워크 체크는 별도의 useEffect에서 처리합니다.\n};const handleExchange=async()=>{if(!(await checkAndSwitchNetwork())){console.log('Network check failed');return;}if(!active||!library){console.log('Wallet not connected');setErrorMessage('Please connect your wallet first');return;}if(parseFloat(inputAmount)>parseFloat(balances[inputToken])){console.log('Insufficient balance');setErrorMessage('Insufficient balance');return;}setErrorMessage('');setIsExchanging(true);try{const signer=library.getSigner();const contract=new ethers.Contract(CONTRACT_ADDRESS,CONTRACT_ABI,signer);console.log('Contract methods:',Object.keys(contract.functions));console.log('Exchange parameters:',{inputToken,outputToken,inputAmount,CONTRACT_ADDRESS,userAddress:await signer.getAddress()});let tx;const gasLimit=ethers.utils.hexlify(300000);// 고정된 가스 한도 사용\nif(inputToken==='ETH'){console.log('Exchanging ETH for token');tx=await contract.exchangeETHForToken(TOKENS[outputToken].address,{value:ethers.utils.parseEther(inputAmount),gasLimit:gasLimit});}else if(outputToken==='ETH'){console.log('Exchanging token for ETH');const tokenContract=new ethers.Contract(TOKENS[inputToken].address,ERC20_ABI,signer);const amount=ethers.utils.parseUnits(inputAmount,TOKENS[inputToken].decimals);// Check and approve allowance\nconst allowance=await tokenContract.allowance(await signer.getAddress(),CONTRACT_ADDRESS);if(allowance.lt(amount)){console.log('Approving token...');const approveTx=await tokenContract.approve(CONTRACT_ADDRESS,amount);await approveTx.wait();console.log('Token approved');}tx=await contract.exchangeTokenForETH(TOKENS[inputToken].address,amount,{gasLimit:gasLimit});}else{console.log('Exchanging token for token');const tokenContract=new ethers.Contract(TOKENS[inputToken].address,ERC20_ABI,signer);const amount=ethers.utils.parseUnits(inputAmount,TOKENS[inputToken].decimals);// Check and approve allowance\nconst allowance=await tokenContract.allowance(await signer.getAddress(),CONTRACT_ADDRESS);if(allowance.lt(amount)){console.log('Approving token...');const approveTx=await tokenContract.approve(CONTRACT_ADDRESS,amount);await approveTx.wait();console.log('Token approved');}tx=await contract.exchangeTokens(TOKENS[inputToken].address,TOKENS[outputToken].address,amount,{gasLimit:gasLimit});}console.log('Transaction sent:',tx.hash);const receipt=await tx.wait();console.log('Transaction confirmed:',receipt.transactionHash);alert('Exchange successful!');await updateBalances();}catch(error){console.error('Exchange failed:',error);if(error.error&&error.error.message){console.error('Error details:',error.error.message);setErrorMessage(`Exchange failed: ${error.error.message}`);}else if(error.message){console.error('Error details:',error.message);setErrorMessage(`Exchange failed: ${error.message}`);}else{console.error('Unknown error:',error);setErrorMessage('An unknown error occurred. Please try again.');}}finally{setIsExchanging(false);}};const setMaxAmount=()=>{if(inputToken==='ETH'){// ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\nconst maxAmount=parseFloat(balances[inputToken])-0.01;setInputAmount(maxAmount>0?maxAmount.toString():'0');}else{setInputAmount(balances[inputToken]);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"exchange-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Swap\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"swap-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"token-input\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"token-select\",children:/*#__PURE__*/_jsx(\"select\",{value:inputToken,onChange:handleInputTokenChange,children:Object.keys(TOKENS).map(token=>/*#__PURE__*/_jsx(\"option\",{value:token,children:TOKENS[token].name},token))})}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:inputAmount,onChange:e=>{setInputAmount(e.target.value===''?'0':e.target.value);setError('');},placeholder:\"0.0\"}),/*#__PURE__*/_jsx(\"button\",{onClick:setMaxAmount,className:\"max-button\",children:\"MAX\"})]}),/*#__PURE__*/_jsxs(\"p\",{className:\"balance\",children:[\"Balance: \",active?parseFloat(balances[inputToken]).toFixed(4):'0.0000',\" \",inputToken]}),/*#__PURE__*/_jsx(\"div\",{className:\"swap-icon\",children:\"\\u2193\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"token-input\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"token-select\",children:/*#__PURE__*/_jsx(\"select\",{value:outputToken,onChange:handleOutputTokenChange,children:Object.keys(TOKENS).filter(token=>token!==inputToken).map(token=>/*#__PURE__*/_jsx(\"option\",{value:token,children:TOKENS[token].name},token))})}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:outputAmount||'0.0000',readOnly:true,placeholder:\"0.0000\"})]})]}),errorMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:errorMessage}),/*#__PURE__*/_jsx(\"button\",{onClick:handleExchange,disabled:!active||!inputAmount||parseFloat(inputAmount)>parseFloat(balances[inputToken])||isExchanging,className:\"swap-button\",children:isExchanging?'Exchanging...':'Swap'})]});}export default TokenExchange;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useWeb3React","ethers","SEPOLIA_CHAIN_ID","CONTRACT_ADDRESS","CONTRACT_ABI","jsx","_jsx","jsxs","_jsxs","ERC20_ABI","constant","inputs","name","type","outputs","TOKENS","ETH","symbol","decimals","price","gUSDC","address","gUSDT","gKIP","TokenExchange","_ref","checkAndSwitchNetwork","switchToSepolia","active","library","account","chainId","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","balances","setBalances","error","setError","isExchanging","setIsExchanging","errorMessage","setErrorMessage","updateBalances","newBalances","token","Object","entries","balance","getBalance","utils","formatEther","tokenContract","Contract","getSigner","balanceOf","formatUnits","console","init","result","warn","calculateOutputAmount","inputValue","parseFloat","ethValue","log","toFixed","handleInputTokenChange","e","newInputToken","target","value","newOutputToken","keys","find","handleOutputTokenChange","handleExchange","signer","contract","functions","userAddress","getAddress","tx","gasLimit","hexlify","exchangeETHForToken","parseEther","amount","parseUnits","allowance","lt","approveTx","approve","wait","exchangeTokenForETH","exchangeTokens","hash","receipt","transactionHash","alert","message","setMaxAmount","maxAmount","toString","className","children","onChange","map","placeholder","onClick","filter","readOnly","disabled"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\r\n\r\nconst ERC20_ABI = [\r\n  // 다른 함수들...\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"_owner\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { name: \"_spender\", type: \"address\" },\r\n      { name: \"_value\", type: \"uint256\" }\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [{ name: \"\", type: \"bool\" }],\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      { name: \"_owner\", type: \"address\" },\r\n      { name: \"_spender\", type: \"address\" }\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [{ name: \"remaining\", type: \"uint256\" }],\r\n    type: \"function\"\r\n  },\r\n  // 다른 함수들...\r\n];\r\n\r\n// TOKENS 객체에 각 토큰의 가격 정보를 추가합니다.\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum', decimals: 18, price: 1000 },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c', decimals: 18, price: 1 },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2', decimals: 18, price: 1 },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B', decimals: 18, price: 0.00012 },\r\n};\r\n\r\nfunction TokenExchange({ checkAndSwitchNetwork, switchToSepolia }) {\r\n  const { active, library, account, chainId } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('0');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [balances, setBalances] = useState({});\r\n  const [error, setError] = useState('');\r\n  const [isExchanging, setIsExchanging] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const updateBalances = useCallback(async () => {\r\n    if (!active || !library || !account) return;\r\n\r\n    const newBalances = {};\r\n    for (const [symbol, token] of Object.entries(TOKENS)) {\r\n      if (symbol === 'ETH') {\r\n        const balance = await library.getBalance(account);\r\n        newBalances[symbol] = ethers.utils.formatEther(balance);\r\n      } else {\r\n        try {\r\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\r\n          const balance = await tokenContract.balanceOf(account);\r\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\r\n        } catch (error) {\r\n          console.error(`Error fetching balance for ${symbol}:`, error);\r\n          newBalances[symbol] = '0';\r\n        }\r\n      }\r\n    }\r\n    setBalances(newBalances);\r\n  }, [active, library, account]);\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      const init = async () => {\r\n        const result = await checkAndSwitchNetwork();\r\n        if (result) {\r\n          await updateBalances();\r\n        } else {\r\n          console.warn('Failed to switch network');\r\n        }\r\n      };\r\n      init();\r\n    }\r\n  }, [active, library, checkAndSwitchNetwork, updateBalances]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken]);\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !TOKENS[inputToken] || !TOKENS[outputToken]) {\r\n      setOutputAmount('0.0000');\r\n      return;\r\n    }\r\n    \r\n    const inputValue = parseFloat(inputAmount);\r\n    let outputAmount;\r\n\r\n    if (inputToken === 'ETH') {\r\n      if (outputToken === 'gUSDC' || outputToken === 'gUSDT') {\r\n        // ETH to USDC/USDT: 1:1 ratio\r\n        outputAmount = inputValue;\r\n      } else if (outputToken === 'gKIP') {\r\n        // ETH to gKIP: 0.001 ETH = 8.333333333 gKIP\r\n        outputAmount = (inputValue / 0.001) * 8.333333333;\r\n      }\r\n    } else if (outputToken === 'ETH') {\r\n      if (inputToken === 'gUSDC' || inputToken === 'gUSDT') {\r\n        // USDC/USDT to ETH: 1:1 ratio\r\n        outputAmount = inputValue;\r\n      } else if (inputToken === 'gKIP') {\r\n        // gKIP to ETH: 8.333333333 gKIP = 0.001 ETH\r\n        outputAmount = (inputValue / 8.333333333) * 0.001;\r\n      }\r\n    } else {\r\n      // Token to Token exchanges\r\n      let ethValue;\r\n      if (inputToken === 'gUSDC' || inputToken === 'gUSDT') {\r\n        ethValue = inputValue;\r\n      } else if (inputToken === 'gKIP') {\r\n        ethValue = (inputValue / 8.333333333) * 0.001;\r\n      }\r\n\r\n      if (outputToken === 'gUSDC' || outputToken === 'gUSDT') {\r\n        outputAmount = ethValue;\r\n      } else if (outputToken === 'gKIP') {\r\n        outputAmount = (ethValue / 0.001) * 8.333333333;\r\n      }\r\n    }\r\n\r\n    console.log('Calculation:', { \r\n      inputAmount,\r\n      inputToken,\r\n      outputToken,\r\n      outputAmount\r\n    });\r\n    \r\n    setOutputAmount(outputAmount.toFixed(6));\r\n  };\r\n\r\n  const handleInputTokenChange = (e) => {\r\n    const newInputToken = e.target.value;\r\n    setInputToken(newInputToken);\r\n    \r\n    // 입력 토큰이 변경되면 출력 토큰을 자동으로 조정합니다.\r\n    if (newInputToken === outputToken) {\r\n      const newOutputToken = Object.keys(TOKENS).find(token => token !== newInputToken);\r\n      setOutputToken(newOutputToken);\r\n    }\r\n\r\n    // 입력값을 '0'으로 초기화합니다.\r\n    setInputAmount('0');\r\n    setOutputAmount('0.0000');\r\n\r\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\r\n  };\r\n\r\n  const handleOutputTokenChange = (e) => {\r\n    const newOutputToken = e.target.value;\r\n    setOutputToken(newOutputToken);\r\n    \r\n    // 출력 토큰이 변경되면 입력 토큰을 자동으로 조정합니다.\r\n    if (newOutputToken === inputToken) {\r\n      const newInputToken = Object.keys(TOKENS).find(token => token !== newOutputToken);\r\n      setInputToken(newInputToken);\r\n    }\r\n\r\n    // 입력값을 '0'으로 초기화합니다.\r\n    setInputAmount('0');\r\n    setOutputAmount('0.0000');\r\n\r\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!await checkAndSwitchNetwork()) {\r\n      console.log('Network check failed');\r\n      return;\r\n    }\r\n\r\n    if (!active || !library) {\r\n      console.log('Wallet not connected');\r\n      setErrorMessage('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\r\n      console.log('Insufficient balance');\r\n      setErrorMessage('Insufficient balance');\r\n      return;\r\n    }\r\n\r\n    setErrorMessage('');\r\n    setIsExchanging(true);\r\n\r\n    try {\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      console.log('Contract methods:', Object.keys(contract.functions));\r\n\r\n      console.log('Exchange parameters:', {\r\n        inputToken,\r\n        outputToken,\r\n        inputAmount,\r\n        CONTRACT_ADDRESS,\r\n        userAddress: await signer.getAddress()\r\n      });\r\n\r\n      let tx;\r\n      const gasLimit = ethers.utils.hexlify(300000); // 고정된 가스 한도 사용\r\n\r\n      if (inputToken === 'ETH') {\r\n        console.log('Exchanging ETH for token');\r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount),\r\n          gasLimit: gasLimit\r\n        });\r\n      } else if (outputToken === 'ETH') {\r\n        console.log('Exchanging token for ETH');\r\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        const amount = ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals);\r\n        \r\n        // Check and approve allowance\r\n        const allowance = await tokenContract.allowance(await signer.getAddress(), CONTRACT_ADDRESS);\r\n        if (allowance.lt(amount)) {\r\n          console.log('Approving token...');\r\n          const approveTx = await tokenContract.approve(CONTRACT_ADDRESS, amount);\r\n          await approveTx.wait();\r\n          console.log('Token approved');\r\n        }\r\n\r\n        tx = await contract.exchangeTokenForETH(TOKENS[inputToken].address, amount, {\r\n          gasLimit: gasLimit\r\n        });\r\n      } else {\r\n        console.log('Exchanging token for token');\r\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        const amount = ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals);\r\n        \r\n        // Check and approve allowance\r\n        const allowance = await tokenContract.allowance(await signer.getAddress(), CONTRACT_ADDRESS);\r\n        if (allowance.lt(amount)) {\r\n          console.log('Approving token...');\r\n          const approveTx = await tokenContract.approve(CONTRACT_ADDRESS, amount);\r\n          await approveTx.wait();\r\n          console.log('Token approved');\r\n        }\r\n\r\n        tx = await contract.exchangeTokens(TOKENS[inputToken].address, TOKENS[outputToken].address, amount, {\r\n          gasLimit: gasLimit\r\n        });\r\n      }\r\n\r\n      console.log('Transaction sent:', tx.hash);\r\n      const receipt = await tx.wait();\r\n      console.log('Transaction confirmed:', receipt.transactionHash);\r\n\r\n      alert('Exchange successful!');\r\n      await updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      if (error.error && error.error.message) {\r\n        console.error('Error details:', error.error.message);\r\n        setErrorMessage(`Exchange failed: ${error.error.message}`);\r\n      } else if (error.message) {\r\n        console.error('Error details:', error.message);\r\n        setErrorMessage(`Exchange failed: ${error.message}`);\r\n      } else {\r\n        console.error('Unknown error:', error);\r\n        setErrorMessage('An unknown error occurred. Please try again.');\r\n      }\r\n    } finally {\r\n      setIsExchanging(false);\r\n    }\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    if (inputToken === 'ETH') {\r\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\r\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\r\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n    } else {\r\n      setInputAmount(balances[inputToken]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Swap</h2>\r\n      <div className=\"swap-box\">\r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={inputToken} \r\n              onChange={handleInputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={inputAmount}\r\n            onChange={(e) => {\r\n              setInputAmount(e.target.value === '' ? '0' : e.target.value);\r\n              setError('');\r\n            }}\r\n            placeholder=\"0.0\"\r\n          />\r\n          <button onClick={setMaxAmount} className=\"max-button\">MAX</button>\r\n        </div>\r\n        <p className=\"balance\">Balance: {active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000'} {inputToken}</p>\r\n        \r\n        <div className=\"swap-icon\">↓</div>\r\n        \r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={outputToken} \r\n              onChange={handleOutputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={outputAmount || '0.0000'}\r\n            readOnly\r\n            placeholder=\"0.0000\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      \r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]) || isExchanging}\r\n        className=\"swap-button\"\r\n      >\r\n        {isExchanging ? 'Exchanging...' : 'Swap'}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}