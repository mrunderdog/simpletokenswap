{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\WalletConnect.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst injected = new InjectedConnector({\n  supportedChainIds: [1] // Ethereum Mainnet\n});\nconst walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: 'https://mainnet.infura.io/v3/YOUR-PROJECT-ID'\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true\n});\nfunction WalletConnect() {\n  _s();\n  const {\n    activate,\n    active,\n    account\n  } = useWeb3React();\n  const connectWallet = async connector => {\n    try {\n      await activate(connector);\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: active ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(injected),\n        children: \"Connect MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(walletconnect),\n        children: \"Connect WalletConnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(WalletConnect, \"L1Cv8SnwDeOZvnbxxp8dSyI9Hbs=\", false, function () {\n  return [useWeb3React];\n});\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","useWeb3React","InjectedConnector","WalletConnectConnector","jsxDEV","_jsxDEV","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","WalletConnect","_s","activate","active","account","connectWallet","connector","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/WalletConnect.js"],"sourcesContent":["import React from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\r\n\r\nconst injected = new InjectedConnector({\r\n  supportedChainIds: [1], // Ethereum Mainnet\r\n});\r\n\r\nconst walletconnect = new WalletConnectConnector({\r\n  rpc: { 1: 'https://mainnet.infura.io/v3/YOUR-PROJECT-ID' },\r\n  bridge: 'https://bridge.walletconnect.org',\r\n  qrcode: true,\r\n});\r\n\r\nfunction WalletConnect() {\r\n  const { activate, active, account } = useWeb3React();\r\n\r\n  const connectWallet = async (connector) => {\r\n    try {\r\n      await activate(connector);\r\n    } catch (error) {\r\n      console.error('Failed to connect wallet:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {active ? (\r\n        <p>Connected: {account}</p>\r\n      ) : (\r\n        <div>\r\n          <button onClick={() => connectWallet(injected)}>Connect MetaMask</button>\r\n          <button onClick={() => connectWallet(walletconnect)}>Connect WalletConnect</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalletConnect;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,sBAAsB,QAAQ,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,QAAQ,GAAG,IAAIJ,iBAAiB,CAAC;EACrCK,iBAAiB,EAAE,CAAC,CAAC,CAAC,CAAE;AAC1B,CAAC,CAAC;AAEF,MAAMC,aAAa,GAAG,IAAIL,sBAAsB,CAAC;EAC/CM,GAAG,EAAE;IAAE,CAAC,EAAE;EAA+C,CAAC;EAC1DC,MAAM,EAAE,kCAAkC;EAC1CC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGf,YAAY,CAAC,CAAC;EAEpD,MAAMgB,aAAa,GAAG,MAAOC,SAAS,IAAK;IACzC,IAAI;MACF,MAAMJ,QAAQ,CAACI,SAAS,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,oBACEd,OAAA;IAAAgB,QAAA,EACGN,MAAM,gBACLV,OAAA;MAAAgB,QAAA,GAAG,aAAW,EAACL,OAAO;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAE3BpB,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAQqB,OAAO,EAAEA,CAAA,KAAMT,aAAa,CAACX,QAAQ,CAAE;QAAAe,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzEpB,OAAA;QAAQqB,OAAO,EAAEA,CAAA,KAAMT,aAAa,CAACT,aAAa,CAAE;QAAAa,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChF;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACZ,EAAA,CAvBQD,aAAa;EAAA,QACkBX,YAAY;AAAA;AAAA0B,EAAA,GAD3Cf,aAAa;AAyBtB,eAAeA,aAAa;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}