{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\TokenExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = '0x...'; // 새로 배포한 컨트랙트 주소\nconst CONTRACT_ABI = [/* 새로운 ABI */];\nconst TOKENS = {\n  ETH: {\n    symbol: 'ETH',\n    name: 'Ethereum'\n  },\n  gUSDC: {\n    symbol: 'gUSDC',\n    name: 'gUSDC',\n    address: '0x...'\n  },\n  gUSDT: {\n    symbol: 'gUSDT',\n    name: 'gUSDT',\n    address: '0x...'\n  },\n  gKIP: {\n    symbol: 'gKIP',\n    name: 'gKIP',\n    address: '0x...'\n  }\n};\nfunction TokenExchange() {\n  _s();\n  const {\n    active,\n    library,\n    account\n  } = useWeb3React();\n  const [inputToken, setInputToken] = useState('ETH');\n  const [outputToken, setOutputToken] = useState('gKIP');\n  const [inputAmount, setInputAmount] = useState('');\n  const [outputAmount, setOutputAmount] = useState('');\n  const [prices, setPrices] = useState({});\n  useEffect(() => {\n    if (active && library) {\n      updateBalances();\n      fetchPrices();\n    }\n  }, [active, library, account]);\n  useEffect(() => {\n    calculateOutputAmount();\n  }, [inputAmount, inputToken, outputToken, prices]);\n  const fetchPrices = async () => {\n    // 여기서 실제 API를 호출하여 가격 정보를 가져옵니다.\n    // 예시로 임의의 가격을 설정합니다.\n    setPrices({\n      ETH: 2000,\n      gUSDC: 1,\n      gUSDT: 1,\n      gKIP: 0.00012\n    });\n  };\n  const calculateOutputAmount = () => {\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) return;\n    const inputValue = parseFloat(inputAmount) * prices[inputToken];\n    const outputValue = inputValue / prices[outputToken];\n    setOutputAmount(outputValue.toFixed(6));\n  };\n  const handleExchange = async () => {\n    if (!active || !library) {\n      alert('Please connect your wallet first');\n      return;\n    }\n    try {\n      const signer = library.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      let tx;\n      if (inputToken === 'ETH') {\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\n          value: ethers.utils.parseEther(inputAmount)\n        });\n      } else {\n        const inputTokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        await inputTokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, 18));\n        tx = await contract.exchangeTokenForToken(TOKENS[inputToken].address, TOKENS[outputToken].address, ethers.utils.parseUnits(inputAmount, 18));\n      }\n      await tx.wait();\n      alert('Exchange successful!');\n      updateBalances();\n    } catch (error) {\n      console.error('Exchange failed:', error);\n      alert('Exchange failed. Please check console for details.');\n    }\n  };\n  const updateBalances = async () => {\n    // 여기서 각 토큰의 잔액을 업데이트합니다.\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Token Exchange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: inputToken,\n        onChange: e => setInputToken(e.target.value),\n        children: Object.keys(TOKENS).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: token,\n          children: TOKENS[token].name\n        }, token, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: inputAmount,\n        onChange: e => setInputAmount(e.target.value),\n        placeholder: \"Input Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: outputToken,\n        onChange: e => setOutputToken(e.target.value),\n        children: Object.keys(TOKENS).filter(token => token !== inputToken).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: token,\n          children: TOKENS[token].name\n        }, token, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: outputAmount,\n        readOnly: true,\n        placeholder: \"Output Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExchange,\n      disabled: !active || !inputAmount,\n      children: \"Exchange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenExchange, \"H+M+uvEibWkiep8CKI+GDQjx3I4=\", false, function () {\n  return [useWeb3React];\n});\n_c = TokenExchange;\nexport default TokenExchange;\nvar _c;\n$RefreshReg$(_c, \"TokenExchange\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","ethers","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","CONTRACT_ABI","TOKENS","ETH","symbol","name","gUSDC","address","gUSDT","gKIP","TokenExchange","_s","active","library","account","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","prices","setPrices","updateBalances","fetchPrices","calculateOutputAmount","inputValue","parseFloat","outputValue","toFixed","handleExchange","alert","signer","getSigner","contract","Contract","tx","exchangeETHForToken","value","utils","parseEther","inputTokenContract","ERC20_ABI","approve","parseUnits","exchangeTokenForToken","wait","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","Object","keys","map","token","type","placeholder","filter","readOnly","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\n\r\nconst CONTRACT_ADDRESS = '0x...'; // 새로 배포한 컨트랙트 주소\r\nconst CONTRACT_ABI = [/* 새로운 ABI */];\r\n\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum' },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x...' },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0x...' },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x...' },\r\n};\r\n\r\nfunction TokenExchange() {\r\n  const { active, library, account } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [prices, setPrices] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      updateBalances();\r\n      fetchPrices();\r\n    }\r\n  }, [active, library, account]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken, prices]);\r\n\r\n  const fetchPrices = async () => {\r\n    // 여기서 실제 API를 호출하여 가격 정보를 가져옵니다.\r\n    // 예시로 임의의 가격을 설정합니다.\r\n    setPrices({\r\n      ETH: 2000,\r\n      gUSDC: 1,\r\n      gUSDT: 1,\r\n      gKIP: 0.00012,\r\n    });\r\n  };\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) return;\r\n    const inputValue = parseFloat(inputAmount) * prices[inputToken];\r\n    const outputValue = inputValue / prices[outputToken];\r\n    setOutputAmount(outputValue.toFixed(6));\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!active || !library) {\r\n      alert('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      let tx;\r\n      if (inputToken === 'ETH') {\r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n      } else {\r\n        const inputTokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        await inputTokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, 18));\r\n        tx = await contract.exchangeTokenForToken(\r\n          TOKENS[inputToken].address,\r\n          TOKENS[outputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, 18)\r\n        );\r\n      }\r\n\r\n      await tx.wait();\r\n      alert('Exchange successful!');\r\n      updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      alert('Exchange failed. Please check console for details.');\r\n    }\r\n  };\r\n\r\n  const updateBalances = async () => {\r\n    // 여기서 각 토큰의 잔액을 업데이트합니다.\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Token Exchange</h2>\r\n      <div>\r\n        <select value={inputToken} onChange={(e) => setInputToken(e.target.value)}>\r\n          {Object.keys(TOKENS).map(token => (\r\n            <option key={token} value={token}>{TOKENS[token].name}</option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          value={inputAmount}\r\n          onChange={(e) => setInputAmount(e.target.value)}\r\n          placeholder=\"Input Amount\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <select value={outputToken} onChange={(e) => setOutputToken(e.target.value)}>\r\n          {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n            <option key={token} value={token}>{TOKENS[token].name}</option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          value={outputAmount}\r\n          readOnly\r\n          placeholder=\"Output Amount\"\r\n        />\r\n      </div>\r\n      <button onClick={handleExchange} disabled={!active || !inputAmount}>\r\n        Exchange\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}