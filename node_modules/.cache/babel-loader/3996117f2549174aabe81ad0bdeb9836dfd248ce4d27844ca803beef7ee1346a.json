{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useWeb3React}from'@web3-react/core';import{ethers}from'ethers';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SEPOLIA_CHAIN_ID=11155111;const CONTRACT_ADDRESS='0x...';// 새로 배포한 컨트랙트 주소\nconst CONTRACT_ABI=[/* 새로운 ABI */];const ERC20_ABI=[// 다른 함수들...\n{constant:true,inputs:[{name:\"_owner\",type:\"address\"}],name:\"balanceOf\",outputs:[{name:\"balance\",type:\"uint256\"}],type:\"function\"}// 다른 함수들...\n];const TOKENS={ETH:{symbol:'ETH',name:'Ethereum',decimals:18},gUSDC:{symbol:'gUSDC',name:'gUSDC',address:'0x...',decimals:6},gUSDT:{symbol:'gUSDT',name:'gUSDT',address:'0x...',decimals:6},gKIP:{symbol:'gKIP',name:'gKIP',address:'0x...',decimals:18}};function TokenExchange(_ref){let{checkAndSwitchNetwork}=_ref;const{active,library,account,chainId}=useWeb3React();const[inputToken,setInputToken]=useState('ETH');const[outputToken,setOutputToken]=useState('gKIP');const[inputAmount,setInputAmount]=useState('');const[outputAmount,setOutputAmount]=useState('');const[prices,setPrices]=useState({});const[balances,setBalances]=useState({});const[error,setError]=useState('');useEffect(()=>{if(active&&library){checkAndSwitchNetwork().then(result=>{if(result){updateBalances();fetchPrices();}});}},[active,library,account,chainId]);useEffect(()=>{calculateOutputAmount();},[inputAmount,inputToken,outputToken,prices]);const fetchPrices=async()=>{try{const response=await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');const data=await response.json();setPrices({ETH:data.ethereum.usd,gUSDC:data['usd-coin'].usd,gUSDT:data.tether.usd,gKIP:0.00012// Laos Kip 가격은 별도로 찾아야 할 수 있습니다.\n});}catch(error){console.error('Failed to fetch prices:',error);}};const calculateOutputAmount=()=>{if(!inputAmount||!prices[inputToken]||!prices[outputToken]){setOutputAmount('0.0000');return;}const inputValue=parseFloat(inputAmount)*prices[inputToken];const outputValue=inputValue/prices[outputToken];setOutputAmount(outputValue.toFixed(6));};const handleInputTokenChange=async e=>{if(await checkAndSwitchNetwork()){setInputToken(e.target.value);}};const handleOutputTokenChange=async e=>{if(await checkAndSwitchNetwork()){setOutputToken(e.target.value);}};const handleExchange=async()=>{if(!(await checkAndSwitchNetwork())){return;}if(!active||!library){alert('Please connect your wallet first');return;}if(parseFloat(inputAmount)>parseFloat(balances[inputToken])){setError('Insufficient balance');return;}setError('');try{const signer=library.getSigner();const contract=new ethers.Contract(CONTRACT_ADDRESS,CONTRACT_ABI,signer);let tx;if(inputToken==='ETH'){tx=await contract.exchangeETHForToken(TOKENS[outputToken].address,{value:ethers.utils.parseEther(inputAmount)});}else{const inputTokenContract=new ethers.Contract(TOKENS[inputToken].address,ERC20_ABI,signer);await inputTokenContract.approve(CONTRACT_ADDRESS,ethers.utils.parseUnits(inputAmount,TOKENS[inputToken].decimals));tx=await contract.exchangeTokenForToken(TOKENS[inputToken].address,TOKENS[outputToken].address,ethers.utils.parseUnits(inputAmount,TOKENS[inputToken].decimals));}await tx.wait();alert('Exchange successful!');updateBalances();}catch(error){console.error('Exchange failed:',error);alert('Exchange failed. Please check console for details.');}};const updateBalances=async()=>{if(!active||!library||!account)return;const newBalances={};for(const[symbol,token]of Object.entries(TOKENS)){if(symbol==='ETH'){const balance=await library.getBalance(account);newBalances[symbol]=ethers.utils.formatEther(balance);}else{try{const tokenContract=new ethers.Contract(token.address,ERC20_ABI,library.getSigner());const balance=await tokenContract.balanceOf(account);newBalances[symbol]=ethers.utils.formatUnits(balance,token.decimals);}catch(error){console.error(`Error fetching balance for ${symbol}:`,error);newBalances[symbol]='0';}}}setBalances(newBalances);};const setMaxAmount=()=>{if(inputToken==='ETH'){// ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\nconst maxAmount=parseFloat(balances[inputToken])-0.01;setInputAmount(maxAmount>0?maxAmount.toString():'0');}else{setInputAmount(balances[inputToken]);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"exchange-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Swap\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"swap-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"token-input\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"token-select\",children:/*#__PURE__*/_jsx(\"select\",{value:inputToken,onChange:handleInputTokenChange,children:Object.keys(TOKENS).map(token=>/*#__PURE__*/_jsx(\"option\",{value:token,children:TOKENS[token].name},token))})}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:inputAmount,onChange:e=>{setInputAmount(e.target.value);setError('');},placeholder:\"0.0\"}),/*#__PURE__*/_jsx(\"button\",{onClick:setMaxAmount,className:\"max-button\",children:\"MAX\"})]}),/*#__PURE__*/_jsxs(\"p\",{className:\"balance\",children:[\"Balance: \",active?parseFloat(balances[inputToken]).toFixed(4):'0.0000',\" \",inputToken]}),/*#__PURE__*/_jsx(\"div\",{className:\"swap-icon\",children:\"\\u2193\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"token-input\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"token-select\",children:/*#__PURE__*/_jsx(\"select\",{value:outputToken,onChange:handleOutputTokenChange,children:Object.keys(TOKENS).filter(token=>token!==inputToken).map(token=>/*#__PURE__*/_jsx(\"option\",{value:token,children:TOKENS[token].name},token))})}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:outputAmount||'0.0000',readOnly:true,placeholder:\"0.0000\"})]}),/*#__PURE__*/_jsxs(\"p\",{className:\"balance\",children:[\"Balance: \",parseFloat(balances[outputToken]||'0').toFixed(4),\" \",outputToken]})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsx(\"button\",{onClick:handleExchange,disabled:!active||!inputAmount||parseFloat(inputAmount)>parseFloat(balances[inputToken]),className:\"swap-button\",children:\"Swap\"})]});}export default TokenExchange;","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","ethers","jsx","_jsx","jsxs","_jsxs","SEPOLIA_CHAIN_ID","CONTRACT_ADDRESS","CONTRACT_ABI","ERC20_ABI","constant","inputs","name","type","outputs","TOKENS","ETH","symbol","decimals","gUSDC","address","gUSDT","gKIP","TokenExchange","_ref","checkAndSwitchNetwork","active","library","account","chainId","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","prices","setPrices","balances","setBalances","error","setError","then","result","updateBalances","fetchPrices","calculateOutputAmount","response","fetch","data","json","ethereum","usd","tether","console","inputValue","parseFloat","outputValue","toFixed","handleInputTokenChange","e","target","value","handleOutputTokenChange","handleExchange","alert","signer","getSigner","contract","Contract","tx","exchangeETHForToken","utils","parseEther","inputTokenContract","approve","parseUnits","exchangeTokenForToken","wait","newBalances","token","Object","entries","balance","getBalance","formatEther","tokenContract","balanceOf","formatUnits","setMaxAmount","maxAmount","toString","className","children","onChange","keys","map","placeholder","onClick","filter","readOnly","disabled"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\n\r\nconst SEPOLIA_CHAIN_ID = 11155111;\r\n\r\nconst CONTRACT_ADDRESS = '0x...'; // 새로 배포한 컨트랙트 주소\r\nconst CONTRACT_ABI = [/* 새로운 ABI */];\r\nconst ERC20_ABI = [\r\n  // 다른 함수들...\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"_owner\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\r\n    type: \"function\",\r\n  },\r\n  // 다른 함수들...\r\n];\r\n\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum', decimals: 18 },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x...', decimals: 6 },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0x...', decimals: 6 },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x...', decimals: 18 },\r\n};\r\n\r\nfunction TokenExchange({ checkAndSwitchNetwork }) {\r\n  const { active, library, account, chainId } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [prices, setPrices] = useState({});\r\n  const [balances, setBalances] = useState({});\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      checkAndSwitchNetwork().then((result) => {\r\n        if (result) {\r\n          updateBalances();\r\n          fetchPrices();\r\n        }\r\n      });\r\n    }\r\n  }, [active, library, account, chainId]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken, prices]);\r\n\r\n  const fetchPrices = async () => {\r\n    try {\r\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\r\n      const data = await response.json();\r\n      setPrices({\r\n        ETH: data.ethereum.usd,\r\n        gUSDC: data['usd-coin'].usd,\r\n        gUSDT: data.tether.usd,\r\n        gKIP: 0.00012, // Laos Kip 가격은 별도로 찾아야 할 수 있습니다.\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to fetch prices:', error);\r\n    }\r\n  };\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) {\r\n      setOutputAmount('0.0000');\r\n      return;\r\n    }\r\n    const inputValue = parseFloat(inputAmount) * prices[inputToken];\r\n    const outputValue = inputValue / prices[outputToken];\r\n    setOutputAmount(outputValue.toFixed(6));\r\n  };\r\n\r\n  const handleInputTokenChange = async (e) => {\r\n    if (await checkAndSwitchNetwork()) {\r\n      setInputToken(e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleOutputTokenChange = async (e) => {\r\n    if (await checkAndSwitchNetwork()) {\r\n      setOutputToken(e.target.value);\r\n    }\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!await checkAndSwitchNetwork()) {\r\n      return;\r\n    }\r\n\r\n    if (!active || !library) {\r\n      alert('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\r\n      setError('Insufficient balance');\r\n      return;\r\n    }\r\n\r\n    setError('');\r\n\r\n    try {\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      let tx;\r\n      if (inputToken === 'ETH') {\r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n      } else {\r\n        const inputTokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        await inputTokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\r\n        tx = await contract.exchangeTokenForToken(\r\n          TOKENS[inputToken].address,\r\n          TOKENS[outputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      }\r\n\r\n      await tx.wait();\r\n      alert('Exchange successful!');\r\n      updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      alert('Exchange failed. Please check console for details.');\r\n    }\r\n  };\r\n\r\n  const updateBalances = async () => {\r\n    if (!active || !library || !account) return;\r\n\r\n    const newBalances = {};\r\n    for (const [symbol, token] of Object.entries(TOKENS)) {\r\n      if (symbol === 'ETH') {\r\n        const balance = await library.getBalance(account);\r\n        newBalances[symbol] = ethers.utils.formatEther(balance);\r\n      } else {\r\n        try {\r\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\r\n          const balance = await tokenContract.balanceOf(account);\r\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\r\n        } catch (error) {\r\n          console.error(`Error fetching balance for ${symbol}:`, error);\r\n          newBalances[symbol] = '0';\r\n        }\r\n      }\r\n    }\r\n    setBalances(newBalances);\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    if (inputToken === 'ETH') {\r\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\r\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\r\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n    } else {\r\n      setInputAmount(balances[inputToken]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Swap</h2>\r\n      <div className=\"swap-box\">\r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={inputToken} \r\n              onChange={handleInputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={inputAmount}\r\n            onChange={(e) => {\r\n              setInputAmount(e.target.value);\r\n              setError('');\r\n            }}\r\n            placeholder=\"0.0\"\r\n          />\r\n          <button onClick={setMaxAmount} className=\"max-button\">MAX</button>\r\n        </div>\r\n        <p className=\"balance\">Balance: {active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000'} {inputToken}</p>\r\n        \r\n        <div className=\"swap-icon\">↓</div>\r\n        \r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={outputToken} \r\n              onChange={handleOutputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={outputAmount || '0.0000'}\r\n            readOnly\r\n            placeholder=\"0.0000\"\r\n          />\r\n        </div>\r\n        <p className=\"balance\">Balance: {parseFloat(balances[outputToken] || '0').toFixed(4)} {outputToken}</p>\r\n      </div>\r\n      \r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      \r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken])}\r\n        className=\"swap-button\"\r\n      >\r\n        Swap\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}