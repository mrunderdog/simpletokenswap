{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\TokenExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ERC20_ABI = [\n// 다른 함수들...\n{\n  constant: true,\n  inputs: [{\n    name: \"_owner\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"balance\",\n    type: \"uint256\"\n  }],\n  type: \"function\"\n}, {\n  constant: false,\n  inputs: [{\n    name: \"_spender\",\n    type: \"address\"\n  }, {\n    name: \"_value\",\n    type: \"uint256\"\n  }],\n  name: \"approve\",\n  outputs: [{\n    name: \"\",\n    type: \"bool\"\n  }],\n  type: \"function\"\n}\n// 다른 함수들...\n];\n\n// TOKENS 객체에 각 토큰의 가격 정보를 추가합니다.\nconst TOKENS = {\n  ETH: {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    decimals: 18,\n    price: 1000\n  },\n  gUSDC: {\n    symbol: 'gUSDC',\n    name: 'gUSDC',\n    address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c',\n    decimals: 18,\n    price: 1\n  },\n  gUSDT: {\n    symbol: 'gUSDT',\n    name: 'gUSDT',\n    address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2',\n    decimals: 18,\n    price: 1\n  },\n  gKIP: {\n    symbol: 'gKIP',\n    name: 'gKIP',\n    address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B',\n    decimals: 18,\n    price: 0.00012\n  }\n};\nfunction TokenExchange({\n  checkAndSwitchNetwork,\n  switchToSepolia\n}) {\n  _s();\n  const {\n    active,\n    library,\n    account,\n    chainId\n  } = useWeb3React();\n  const [inputToken, setInputToken] = useState('ETH');\n  const [outputToken, setOutputToken] = useState('gKIP');\n  const [inputAmount, setInputAmount] = useState('0');\n  const [outputAmount, setOutputAmount] = useState('');\n  const [balances, setBalances] = useState({});\n  const [error, setError] = useState('');\n  const [isExchanging, setIsExchanging] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const updateBalances = useCallback(async () => {\n    if (!active || !library || !account) return;\n    const newBalances = {};\n    for (const [symbol, token] of Object.entries(TOKENS)) {\n      if (symbol === 'ETH') {\n        const balance = await library.getBalance(account);\n        newBalances[symbol] = ethers.utils.formatEther(balance);\n      } else {\n        try {\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\n          const balance = await tokenContract.balanceOf(account);\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\n        } catch (error) {\n          console.error(`Error fetching balance for ${symbol}:`, error);\n          newBalances[symbol] = '0';\n        }\n      }\n    }\n    setBalances(newBalances);\n  }, [active, library, account]);\n  useEffect(() => {\n    if (active && library) {\n      const init = async () => {\n        const result = await checkAndSwitchNetwork();\n        if (result) {\n          await updateBalances();\n        } else {\n          console.warn('Failed to switch network');\n        }\n      };\n      init();\n    }\n  }, [active, library, checkAndSwitchNetwork, updateBalances]);\n  useEffect(() => {\n    calculateOutputAmount();\n  }, [inputAmount, inputToken, outputToken]);\n  const calculateOutputAmount = () => {\n    if (!inputAmount || !TOKENS[inputToken] || !TOKENS[outputToken]) {\n      setOutputAmount('0.0000');\n      return;\n    }\n    const inputValue = parseFloat(inputAmount);\n    let outputAmount;\n    if (inputToken === 'ETH') {\n      if (outputToken === 'gUSDC' || outputToken === 'gUSDT') {\n        // ETH to USDC/USDT: 1:1 ratio\n        outputAmount = inputValue;\n      } else if (outputToken === 'gKIP') {\n        // ETH to gKIP: 0.001 ETH = 8.333333333 gKIP\n        outputAmount = inputValue / 0.001 * 8.333333333;\n      }\n    } else if (outputToken === 'ETH') {\n      if (inputToken === 'gUSDC' || inputToken === 'gUSDT') {\n        // USDC/USDT to ETH: 1:1 ratio\n        outputAmount = inputValue;\n      } else if (inputToken === 'gKIP') {\n        // gKIP to ETH: 8.333333333 gKIP = 0.001 ETH\n        outputAmount = inputValue / 8.333333333 * 0.001;\n      }\n    } else {\n      // Token to Token exchanges\n      let ethValue;\n      if (inputToken === 'gUSDC' || inputToken === 'gUSDT') {\n        ethValue = inputValue;\n      } else if (inputToken === 'gKIP') {\n        ethValue = inputValue / 8.333333333 * 0.001;\n      }\n      if (outputToken === 'gUSDC' || outputToken === 'gUSDT') {\n        outputAmount = ethValue;\n      } else if (outputToken === 'gKIP') {\n        outputAmount = ethValue / 0.001 * 8.333333333;\n      }\n    }\n    console.log('Calculation:', {\n      inputAmount,\n      inputToken,\n      outputToken,\n      outputAmount\n    });\n    setOutputAmount(outputAmount.toFixed(6));\n  };\n  const handleInputTokenChange = e => {\n    const newInputToken = e.target.value;\n    setInputToken(newInputToken);\n\n    // 입력 토큰이 변경되면 출력 토큰을 자동으로 조정합니다.\n    if (newInputToken === outputToken) {\n      const newOutputToken = Object.keys(TOKENS).find(token => token !== newInputToken);\n      setOutputToken(newOutputToken);\n    }\n\n    // 입력값을 '0'으로 초기화합니다.\n    setInputAmount('0');\n    setOutputAmount('0.0000');\n\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\n  };\n  const handleOutputTokenChange = e => {\n    const newOutputToken = e.target.value;\n    setOutputToken(newOutputToken);\n\n    // 출력 토큰이 변경되면 입력 토큰을 자동으로 조정합니다.\n    if (newOutputToken === inputToken) {\n      const newInputToken = Object.keys(TOKENS).find(token => token !== newOutputToken);\n      setInputToken(newInputToken);\n    }\n\n    // 입력값을 '0'으로 초기화합니다.\n    setInputAmount('0');\n    setOutputAmount('0.0000');\n\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\n  };\n  const handleExchange = async () => {\n    if (!(await checkAndSwitchNetwork())) {\n      return;\n    }\n    if (!active || !library) {\n      setErrorMessage('Please connect your wallet first');\n      return;\n    }\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\n      setErrorMessage('Insufficient balance');\n      return;\n    }\n    setErrorMessage('');\n    setIsExchanging(true);\n    try {\n      const signer = library.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      console.log('Exchange parameters:', {\n        inputToken,\n        outputToken,\n        inputAmount,\n        CONTRACT_ADDRESS,\n        userAddress: await signer.getAddress()\n      });\n      let tx;\n      if (inputToken === 'ETH') {\n        // Simulate the transaction\n        await contract.callStatic.exchangeETHForToken(TOKENS[outputToken].address, {\n          value: ethers.utils.parseEther(inputAmount)\n        });\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\n          value: ethers.utils.parseEther(inputAmount)\n        });\n      } else if (outputToken === 'ETH') {\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        const amount = ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals);\n\n        // Check allowance\n        const allowance = await tokenContract.allowance(await signer.getAddress(), CONTRACT_ADDRESS);\n        if (allowance.lt(amount)) {\n          console.log('Approving token...');\n          const approveTx = await tokenContract.approve(CONTRACT_ADDRESS, amount);\n          await approveTx.wait();\n          console.log('Token approved');\n        }\n\n        // Simulate the transaction\n        await contract.callStatic.exchangeTokenForETH(TOKENS[inputToken].address, amount);\n        tx = await contract.exchangeTokenForETH(TOKENS[inputToken].address, amount);\n      } else {\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        const amount = ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals);\n\n        // Check allowance\n        const allowance = await tokenContract.allowance(await signer.getAddress(), CONTRACT_ADDRESS);\n        if (allowance.lt(amount)) {\n          console.log('Approving token...');\n          const approveTx = await tokenContract.approve(CONTRACT_ADDRESS, amount);\n          await approveTx.wait();\n          console.log('Token approved');\n        }\n\n        // Simulate the transaction\n        await contract.callStatic.exchangeTokens(TOKENS[inputToken].address, TOKENS[outputToken].address, amount);\n        tx = await contract.exchangeTokens(TOKENS[inputToken].address, TOKENS[outputToken].address, amount);\n      }\n      console.log('Transaction sent:', tx.hash);\n      const receipt = await tx.wait();\n      console.log('Transaction confirmed:', receipt.transactionHash);\n      alert('Exchange successful!');\n      await updateBalances();\n    } catch (error) {\n      console.error('Exchange failed:', error);\n      console.error('Error details:', error.message, error.code, error.data);\n      if (error.code === 4001) {\n        setErrorMessage('Transaction was rejected. Please try again.');\n      } else if (error.message.includes('insufficient funds')) {\n        setErrorMessage('Insufficient funds for this transaction. Please check your balance.');\n      } else {\n        setErrorMessage(`Exchange failed: ${error.message}`);\n      }\n    } finally {\n      setIsExchanging(false);\n    }\n  };\n  const setMaxAmount = () => {\n    if (inputToken === 'ETH') {\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\n    } else {\n      setInputAmount(balances[inputToken]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: inputToken,\n            onChange: handleInputTokenChange,\n            children: Object.keys(TOKENS).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: inputAmount,\n          onChange: e => {\n            setInputAmount(e.target.value === '' ? '0' : e.target.value);\n            setError('');\n          },\n          placeholder: \"0.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setMaxAmount,\n          className: \"max-button\",\n          children: \"MAX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"balance\",\n        children: [\"Balance: \", active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000', \" \", inputToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swap-icon\",\n        children: \"\\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: outputToken,\n            onChange: handleOutputTokenChange,\n            children: Object.keys(TOKENS).filter(token => token !== inputToken).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: outputAmount || '0.0000',\n          readOnly: true,\n          placeholder: \"0.0000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExchange,\n      disabled: !active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]) || isExchanging,\n      className: \"swap-button\",\n      children: isExchanging ? 'Exchanging...' : 'Swap'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenExchange, \"rSgVcPG/1UzUNmidjFteOHrxFBY=\", false, function () {\n  return [useWeb3React];\n});\n_c = TokenExchange;\nexport default TokenExchange;\nvar _c;\n$RefreshReg$(_c, \"TokenExchange\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useWeb3React","ethers","SEPOLIA_CHAIN_ID","CONTRACT_ADDRESS","CONTRACT_ABI","jsxDEV","_jsxDEV","ERC20_ABI","constant","inputs","name","type","outputs","TOKENS","ETH","symbol","decimals","price","gUSDC","address","gUSDT","gKIP","TokenExchange","checkAndSwitchNetwork","switchToSepolia","_s","active","library","account","chainId","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","balances","setBalances","error","setError","isExchanging","setIsExchanging","errorMessage","setErrorMessage","updateBalances","newBalances","token","Object","entries","balance","getBalance","utils","formatEther","tokenContract","Contract","getSigner","balanceOf","formatUnits","console","init","result","warn","calculateOutputAmount","inputValue","parseFloat","ethValue","log","toFixed","handleInputTokenChange","e","newInputToken","target","value","newOutputToken","keys","find","handleOutputTokenChange","handleExchange","signer","contract","userAddress","getAddress","tx","callStatic","exchangeETHForToken","parseEther","amount","parseUnits","allowance","lt","approveTx","approve","wait","exchangeTokenForETH","exchangeTokens","hash","receipt","transactionHash","alert","message","code","data","includes","setMaxAmount","maxAmount","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","placeholder","onClick","filter","readOnly","disabled","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\r\n\r\nconst ERC20_ABI = [\r\n  // 다른 함수들...\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"_owner\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { name: \"_spender\", type: \"address\" },\r\n      { name: \"_value\", type: \"uint256\" }\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [{ name: \"\", type: \"bool\" }],\r\n    type: \"function\"\r\n  },\r\n  // 다른 함수들...\r\n];\r\n\r\n// TOKENS 객체에 각 토큰의 가격 정보를 추가합니다.\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum', decimals: 18, price: 1000 },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c', decimals: 18, price: 1 },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2', decimals: 18, price: 1 },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B', decimals: 18, price: 0.00012 },\r\n};\r\n\r\nfunction TokenExchange({ checkAndSwitchNetwork, switchToSepolia }) {\r\n  const { active, library, account, chainId } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('0');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [balances, setBalances] = useState({});\r\n  const [error, setError] = useState('');\r\n  const [isExchanging, setIsExchanging] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const updateBalances = useCallback(async () => {\r\n    if (!active || !library || !account) return;\r\n\r\n    const newBalances = {};\r\n    for (const [symbol, token] of Object.entries(TOKENS)) {\r\n      if (symbol === 'ETH') {\r\n        const balance = await library.getBalance(account);\r\n        newBalances[symbol] = ethers.utils.formatEther(balance);\r\n      } else {\r\n        try {\r\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\r\n          const balance = await tokenContract.balanceOf(account);\r\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\r\n        } catch (error) {\r\n          console.error(`Error fetching balance for ${symbol}:`, error);\r\n          newBalances[symbol] = '0';\r\n        }\r\n      }\r\n    }\r\n    setBalances(newBalances);\r\n  }, [active, library, account]);\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      const init = async () => {\r\n        const result = await checkAndSwitchNetwork();\r\n        if (result) {\r\n          await updateBalances();\r\n        } else {\r\n          console.warn('Failed to switch network');\r\n        }\r\n      };\r\n      init();\r\n    }\r\n  }, [active, library, checkAndSwitchNetwork, updateBalances]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken]);\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !TOKENS[inputToken] || !TOKENS[outputToken]) {\r\n      setOutputAmount('0.0000');\r\n      return;\r\n    }\r\n    \r\n    const inputValue = parseFloat(inputAmount);\r\n    let outputAmount;\r\n\r\n    if (inputToken === 'ETH') {\r\n      if (outputToken === 'gUSDC' || outputToken === 'gUSDT') {\r\n        // ETH to USDC/USDT: 1:1 ratio\r\n        outputAmount = inputValue;\r\n      } else if (outputToken === 'gKIP') {\r\n        // ETH to gKIP: 0.001 ETH = 8.333333333 gKIP\r\n        outputAmount = (inputValue / 0.001) * 8.333333333;\r\n      }\r\n    } else if (outputToken === 'ETH') {\r\n      if (inputToken === 'gUSDC' || inputToken === 'gUSDT') {\r\n        // USDC/USDT to ETH: 1:1 ratio\r\n        outputAmount = inputValue;\r\n      } else if (inputToken === 'gKIP') {\r\n        // gKIP to ETH: 8.333333333 gKIP = 0.001 ETH\r\n        outputAmount = (inputValue / 8.333333333) * 0.001;\r\n      }\r\n    } else {\r\n      // Token to Token exchanges\r\n      let ethValue;\r\n      if (inputToken === 'gUSDC' || inputToken === 'gUSDT') {\r\n        ethValue = inputValue;\r\n      } else if (inputToken === 'gKIP') {\r\n        ethValue = (inputValue / 8.333333333) * 0.001;\r\n      }\r\n\r\n      if (outputToken === 'gUSDC' || outputToken === 'gUSDT') {\r\n        outputAmount = ethValue;\r\n      } else if (outputToken === 'gKIP') {\r\n        outputAmount = (ethValue / 0.001) * 8.333333333;\r\n      }\r\n    }\r\n\r\n    console.log('Calculation:', { \r\n      inputAmount,\r\n      inputToken,\r\n      outputToken,\r\n      outputAmount\r\n    });\r\n    \r\n    setOutputAmount(outputAmount.toFixed(6));\r\n  };\r\n\r\n  const handleInputTokenChange = (e) => {\r\n    const newInputToken = e.target.value;\r\n    setInputToken(newInputToken);\r\n    \r\n    // 입력 토큰이 변경되면 출력 토큰을 자동으로 조정합니다.\r\n    if (newInputToken === outputToken) {\r\n      const newOutputToken = Object.keys(TOKENS).find(token => token !== newInputToken);\r\n      setOutputToken(newOutputToken);\r\n    }\r\n\r\n    // 입력값을 '0'으로 초기화합니다.\r\n    setInputAmount('0');\r\n    setOutputAmount('0.0000');\r\n\r\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\r\n  };\r\n\r\n  const handleOutputTokenChange = (e) => {\r\n    const newOutputToken = e.target.value;\r\n    setOutputToken(newOutputToken);\r\n    \r\n    // 출력 토큰이 변경되면 입력 토큰을 자동으로 조정합니다.\r\n    if (newOutputToken === inputToken) {\r\n      const newInputToken = Object.keys(TOKENS).find(token => token !== newOutputToken);\r\n      setInputToken(newInputToken);\r\n    }\r\n\r\n    // 입력값을 '0'으로 초기화합니다.\r\n    setInputAmount('0');\r\n    setOutputAmount('0.0000');\r\n\r\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!await checkAndSwitchNetwork()) {\r\n      return;\r\n    }\r\n\r\n    if (!active || !library) {\r\n      setErrorMessage('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\r\n      setErrorMessage('Insufficient balance');\r\n      return;\r\n    }\r\n\r\n    setErrorMessage('');\r\n    setIsExchanging(true);\r\n\r\n    try {\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      console.log('Exchange parameters:', {\r\n        inputToken,\r\n        outputToken,\r\n        inputAmount,\r\n        CONTRACT_ADDRESS,\r\n        userAddress: await signer.getAddress()\r\n      });\r\n\r\n      let tx;\r\n      if (inputToken === 'ETH') {\r\n        // Simulate the transaction\r\n        await contract.callStatic.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n        \r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n      } else if (outputToken === 'ETH') {\r\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        const amount = ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals);\r\n        \r\n        // Check allowance\r\n        const allowance = await tokenContract.allowance(await signer.getAddress(), CONTRACT_ADDRESS);\r\n        if (allowance.lt(amount)) {\r\n          console.log('Approving token...');\r\n          const approveTx = await tokenContract.approve(CONTRACT_ADDRESS, amount);\r\n          await approveTx.wait();\r\n          console.log('Token approved');\r\n        }\r\n\r\n        // Simulate the transaction\r\n        await contract.callStatic.exchangeTokenForETH(TOKENS[inputToken].address, amount);\r\n        \r\n        tx = await contract.exchangeTokenForETH(TOKENS[inputToken].address, amount);\r\n      } else {\r\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        const amount = ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals);\r\n        \r\n        // Check allowance\r\n        const allowance = await tokenContract.allowance(await signer.getAddress(), CONTRACT_ADDRESS);\r\n        if (allowance.lt(amount)) {\r\n          console.log('Approving token...');\r\n          const approveTx = await tokenContract.approve(CONTRACT_ADDRESS, amount);\r\n          await approveTx.wait();\r\n          console.log('Token approved');\r\n        }\r\n\r\n        // Simulate the transaction\r\n        await contract.callStatic.exchangeTokens(TOKENS[inputToken].address, TOKENS[outputToken].address, amount);\r\n        \r\n        tx = await contract.exchangeTokens(TOKENS[inputToken].address, TOKENS[outputToken].address, amount);\r\n      }\r\n\r\n      console.log('Transaction sent:', tx.hash);\r\n      const receipt = await tx.wait();\r\n      console.log('Transaction confirmed:', receipt.transactionHash);\r\n\r\n      alert('Exchange successful!');\r\n      await updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      console.error('Error details:', error.message, error.code, error.data);\r\n      if (error.code === 4001) {\r\n        setErrorMessage('Transaction was rejected. Please try again.');\r\n      } else if (error.message.includes('insufficient funds')) {\r\n        setErrorMessage('Insufficient funds for this transaction. Please check your balance.');\r\n      } else {\r\n        setErrorMessage(`Exchange failed: ${error.message}`);\r\n      }\r\n    } finally {\r\n      setIsExchanging(false);\r\n    }\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    if (inputToken === 'ETH') {\r\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\r\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\r\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n    } else {\r\n      setInputAmount(balances[inputToken]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Swap</h2>\r\n      <div className=\"swap-box\">\r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={inputToken} \r\n              onChange={handleInputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={inputAmount}\r\n            onChange={(e) => {\r\n              setInputAmount(e.target.value === '' ? '0' : e.target.value);\r\n              setError('');\r\n            }}\r\n            placeholder=\"0.0\"\r\n          />\r\n          <button onClick={setMaxAmount} className=\"max-button\">MAX</button>\r\n        </div>\r\n        <p className=\"balance\">Balance: {active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000'} {inputToken}</p>\r\n        \r\n        <div className=\"swap-icon\">↓</div>\r\n        \r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={outputToken} \r\n              onChange={handleOutputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={outputAmount || '0.0000'}\r\n            readOnly\r\n            placeholder=\"0.0000\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      \r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]) || isExchanging}\r\n        className=\"swap-button\"\r\n      >\r\n        {isExchanging ? 'Exchanging...' : 'Swap'}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}