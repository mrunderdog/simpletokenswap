{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursor\\\\Defisite\\\\src\\\\components\\\\TokenExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ERC20_ABI = [\n// 다른 함수들...\n{\n  constant: true,\n  inputs: [{\n    name: \"_owner\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"balance\",\n    type: \"uint256\"\n  }],\n  type: \"function\"\n}, {\n  constant: false,\n  inputs: [{\n    name: \"_spender\",\n    type: \"address\"\n  }, {\n    name: \"_value\",\n    type: \"uint256\"\n  }],\n  name: \"approve\",\n  outputs: [{\n    name: \"\",\n    type: \"bool\"\n  }],\n  type: \"function\"\n}\n// 다른 함수들...\n];\nconst TOKENS = {\n  ETH: {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    decimals: 18\n  },\n  gUSDC: {\n    symbol: 'gUSDC',\n    name: 'gUSDC',\n    address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c',\n    decimals: 18\n  },\n  gUSDT: {\n    symbol: 'gUSDT',\n    name: 'gUSDT',\n    address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2',\n    decimals: 18\n  },\n  gKIP: {\n    symbol: 'gKIP',\n    name: 'gKIP',\n    address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B',\n    decimals: 18\n  }\n};\nfunction TokenExchange({\n  checkAndSwitchNetwork,\n  switchToSepolia\n}) {\n  _s();\n  const {\n    active,\n    library,\n    account,\n    chainId\n  } = useWeb3React();\n  const [inputToken, setInputToken] = useState('ETH');\n  const [outputToken, setOutputToken] = useState('gKIP');\n  const [inputAmount, setInputAmount] = useState('');\n  const [outputAmount, setOutputAmount] = useState('');\n  const [prices, setPrices] = useState({});\n  const [balances, setBalances] = useState({});\n  const [error, setError] = useState('');\n  const [lastPriceUpdate, setLastPriceUpdate] = useState(0);\n  const [isExchanging, setIsExchanging] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const fetchPrices = useCallback(async () => {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\n      const data = await response.json();\n      const newPrices = {\n        ETH: ethers.utils.parseUnits(data.ethereum.usd.toString(), 18),\n        gUSDC: ethers.utils.parseUnits(data['usd-coin'].usd.toString(), 18),\n        gUSDT: ethers.utils.parseUnits(data.tether.usd.toString(), 18),\n        gKIP: ethers.utils.parseUnits('0.00012', 18) // gKIP 가격은 여전히 고정값 사용\n      };\n      setPrices(newPrices);\n      setLastPriceUpdate(Date.now());\n      return newPrices;\n    } catch (error) {\n      console.error('Failed to fetch prices:', error);\n      // 오류 발생 시 기본 가격을 반환합니다.\n      return {\n        ETH: ethers.utils.parseUnits('1000', 18),\n        gUSDC: ethers.utils.parseUnits('1', 18),\n        gUSDT: ethers.utils.parseUnits('1', 18),\n        gKIP: ethers.utils.parseUnits('0.00012', 18)\n      };\n    }\n  }, []);\n  const updateBalances = useCallback(async () => {\n    if (!active || !library || !account) return;\n    const newBalances = {};\n    for (const [symbol, token] of Object.entries(TOKENS)) {\n      if (symbol === 'ETH') {\n        const balance = await library.getBalance(account);\n        newBalances[symbol] = ethers.utils.formatEther(balance);\n      } else {\n        try {\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\n          const balance = await tokenContract.balanceOf(account);\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\n        } catch (error) {\n          console.error(`Error fetching balance for ${symbol}:`, error);\n          newBalances[symbol] = '0';\n        }\n      }\n    }\n    setBalances(newBalances);\n  }, [active, library, account]);\n  useEffect(() => {\n    if (active && library) {\n      checkAndSwitchNetwork().then(result => {\n        if (result) {\n          updateBalances();\n          fetchPrices();\n        } else {\n          console.warn('Failed to switch network');\n        }\n      });\n    }\n  }, [active, library, inputToken, outputToken]);\n  useEffect(() => {\n    calculateOutputAmount();\n  }, [inputAmount, inputToken, outputToken, prices]);\n  const calculateOutputAmount = () => {\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) {\n      setOutputAmount('0.0000');\n      return;\n    }\n    const inputValueUSD = parseFloat(inputAmount) * parseFloat(ethers.utils.formatUnits(prices[inputToken], 18));\n    const outputValue = inputValueUSD / parseFloat(ethers.utils.formatUnits(prices[outputToken], 18));\n    console.log('Calculation:', {\n      inputAmount,\n      inputToken,\n      outputToken,\n      inputValueUSD,\n      outputValue\n    });\n    setOutputAmount(outputValue.toFixed(6));\n  };\n  const handleInputTokenChange = e => {\n    const newInputToken = e.target.value;\n    setInputToken(newInputToken);\n\n    // 입력 토큰이 변경되면 출력 토큰을 자동으로 조정합니다.\n    if (newInputToken === outputToken) {\n      const newOutputToken = Object.keys(TOKENS).find(token => token !== newInputToken);\n      setOutputToken(newOutputToken);\n    }\n\n    // 입력값 초기화\n    setInputAmount('');\n    setOutputAmount('0.0000');\n\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\n  };\n  const handleOutputTokenChange = e => {\n    const newOutputToken = e.target.value;\n    setOutputToken(newOutputToken);\n\n    // 출력 토큰이 변경되면 입력 토큰을 자동으로 조정합니다.\n    if (newOutputToken === inputToken) {\n      const newInputToken = Object.keys(TOKENS).find(token => token !== newOutputToken);\n      setInputToken(newInputToken);\n    }\n\n    // 입력값 초기화\n    setInputAmount('');\n    setOutputAmount('0.0000');\n\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\n  };\n  const handleExchange = async () => {\n    if (!(await checkAndSwitchNetwork())) {\n      return;\n    }\n    if (!active || !library) {\n      setErrorMessage('Please connect your wallet first');\n      return;\n    }\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\n      setErrorMessage('Insufficient balance');\n      return;\n    }\n    setErrorMessage('');\n    setIsExchanging(true);\n    try {\n      // 교환 직전에 가격 업데이트 (프론트엔드에서만)\n      const latestPrices = await fetchPrices();\n      setPrices(latestPrices);\n      const signer = library.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      let tx;\n      if (inputToken === 'ETH') {\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\n          value: ethers.utils.parseEther(inputAmount)\n        });\n      } else if (outputToken === 'ETH') {\n        // ETH로 교환하는 경우, 먼저 토큰 승인이 필요합니다.\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        await tokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n        tx = await contract.exchangeTokenForETH(TOKENS[inputToken].address, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n      } else {\n        // 토큰 간 교환의 경우도 승인이 필요합니다.\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\n        await tokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n        tx = await contract.exchangeTokens(TOKENS[inputToken].address, TOKENS[outputToken].address, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\n      }\n      await tx.wait();\n      alert('Exchange successful!');\n      await updateBalances();\n    } catch (error) {\n      console.error('Exchange failed:', error);\n      if (error.code === 4001) {\n        setErrorMessage('Transaction was rejected. Please try again.');\n      } else if (error.message.includes('insufficient funds')) {\n        setErrorMessage('Insufficient funds for this transaction. Please check your balance.');\n      } else {\n        setErrorMessage('Exchange failed. Please try again or contact support if the issue persists.');\n      }\n    } finally {\n      setIsExchanging(false);\n    }\n  };\n  const setMaxAmount = () => {\n    if (inputToken === 'ETH') {\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\n    } else {\n      setInputAmount(balances[inputToken]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: inputToken,\n            onChange: handleInputTokenChange,\n            children: Object.keys(TOKENS).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: inputAmount,\n          onChange: e => {\n            setInputAmount(e.target.value);\n            setError('');\n          },\n          placeholder: \"0.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setMaxAmount,\n          className: \"max-button\",\n          children: \"MAX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"balance\",\n        children: [\"Balance: \", active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000', \" \", inputToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swap-icon\",\n        children: \"\\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-select\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: outputToken,\n            onChange: handleOutputTokenChange,\n            children: Object.keys(TOKENS).filter(token => token !== inputToken).map(token => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: token,\n              children: TOKENS[token].name\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: outputAmount || '0.0000',\n          readOnly: true,\n          placeholder: \"0.0000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExchange,\n      disabled: !active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]) || isExchanging,\n      className: \"swap-button\",\n      children: isExchanging ? 'Exchanging...' : 'Swap'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"price-update\",\n      children: [\"Last price update: \", new Date(lastPriceUpdate).toLocaleTimeString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenExchange, \"Ly+t3YYuKDN5IbOIAP6ZZFrslk0=\", false, function () {\n  return [useWeb3React];\n});\n_c = TokenExchange;\nexport default TokenExchange;\nvar _c;\n$RefreshReg$(_c, \"TokenExchange\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useWeb3React","ethers","SEPOLIA_CHAIN_ID","CONTRACT_ADDRESS","CONTRACT_ABI","jsxDEV","_jsxDEV","ERC20_ABI","constant","inputs","name","type","outputs","TOKENS","ETH","symbol","decimals","gUSDC","address","gUSDT","gKIP","TokenExchange","checkAndSwitchNetwork","switchToSepolia","_s","active","library","account","chainId","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","prices","setPrices","balances","setBalances","error","setError","lastPriceUpdate","setLastPriceUpdate","isExchanging","setIsExchanging","errorMessage","setErrorMessage","fetchPrices","response","fetch","data","json","newPrices","utils","parseUnits","ethereum","usd","toString","tether","Date","now","console","updateBalances","newBalances","token","Object","entries","balance","getBalance","formatEther","tokenContract","Contract","getSigner","balanceOf","formatUnits","then","result","warn","calculateOutputAmount","inputValueUSD","parseFloat","outputValue","log","toFixed","handleInputTokenChange","e","newInputToken","target","value","newOutputToken","keys","find","handleOutputTokenChange","handleExchange","latestPrices","signer","contract","tx","exchangeETHForToken","parseEther","approve","exchangeTokenForETH","exchangeTokens","wait","alert","code","message","includes","setMaxAmount","maxAmount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","placeholder","onClick","filter","readOnly","disabled","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Cursor/Defisite/src/components/TokenExchange.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\nimport { SEPOLIA_CHAIN_ID, CONTRACT_ADDRESS, CONTRACT_ABI } from '../App';\r\n\r\nconst ERC20_ABI = [\r\n  // 다른 함수들...\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"_owner\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { name: \"_spender\", type: \"address\" },\r\n      { name: \"_value\", type: \"uint256\" }\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [{ name: \"\", type: \"bool\" }],\r\n    type: \"function\"\r\n  },\r\n  // 다른 함수들...\r\n];\r\n\r\nconst TOKENS = {\r\n  ETH: { symbol: 'ETH', name: 'Ethereum', decimals: 18 },\r\n  gUSDC: { symbol: 'gUSDC', name: 'gUSDC', address: '0x37B118a528AAD5a22259AFfa21c34254fDa2B60c', decimals: 18 },\r\n  gUSDT: { symbol: 'gUSDT', name: 'gUSDT', address: '0xeB06441f880F5948e80Ae62042687b4dE22124f2', decimals: 18 },\r\n  gKIP: { symbol: 'gKIP', name: 'gKIP', address: '0x4B5bA223e2f5e4c746C5F714fAD6D641Ef195a5B', decimals: 18 },\r\n};\r\n\r\nfunction TokenExchange({ checkAndSwitchNetwork, switchToSepolia }) {\r\n  const { active, library, account, chainId } = useWeb3React();\r\n  const [inputToken, setInputToken] = useState('ETH');\r\n  const [outputToken, setOutputToken] = useState('gKIP');\r\n  const [inputAmount, setInputAmount] = useState('');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n  const [prices, setPrices] = useState({});\r\n  const [balances, setBalances] = useState({});\r\n  const [error, setError] = useState('');\r\n  const [lastPriceUpdate, setLastPriceUpdate] = useState(0);\r\n  const [isExchanging, setIsExchanging] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const fetchPrices = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum,usd-coin,tether&vs_currencies=usd');\r\n      const data = await response.json();\r\n      const newPrices = {\r\n        ETH: ethers.utils.parseUnits(data.ethereum.usd.toString(), 18),\r\n        gUSDC: ethers.utils.parseUnits(data['usd-coin'].usd.toString(), 18),\r\n        gUSDT: ethers.utils.parseUnits(data.tether.usd.toString(), 18),\r\n        gKIP: ethers.utils.parseUnits('0.00012', 18), // gKIP 가격은 여전히 고정값 사용\r\n      };\r\n      setPrices(newPrices);\r\n      setLastPriceUpdate(Date.now());\r\n      return newPrices;\r\n    } catch (error) {\r\n      console.error('Failed to fetch prices:', error);\r\n      // 오류 발생 시 기본 가격을 반환합니다.\r\n      return {\r\n        ETH: ethers.utils.parseUnits('1000', 18),\r\n        gUSDC: ethers.utils.parseUnits('1', 18),\r\n        gUSDT: ethers.utils.parseUnits('1', 18),\r\n        gKIP: ethers.utils.parseUnits('0.00012', 18)\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const updateBalances = useCallback(async () => {\r\n    if (!active || !library || !account) return;\r\n\r\n    const newBalances = {};\r\n    for (const [symbol, token] of Object.entries(TOKENS)) {\r\n      if (symbol === 'ETH') {\r\n        const balance = await library.getBalance(account);\r\n        newBalances[symbol] = ethers.utils.formatEther(balance);\r\n      } else {\r\n        try {\r\n          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, library.getSigner());\r\n          const balance = await tokenContract.balanceOf(account);\r\n          newBalances[symbol] = ethers.utils.formatUnits(balance, token.decimals);\r\n        } catch (error) {\r\n          console.error(`Error fetching balance for ${symbol}:`, error);\r\n          newBalances[symbol] = '0';\r\n        }\r\n      }\r\n    }\r\n    setBalances(newBalances);\r\n  }, [active, library, account]);\r\n\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      checkAndSwitchNetwork().then(result => {\r\n        if (result) {\r\n          updateBalances();\r\n          fetchPrices();\r\n        } else {\r\n          console.warn('Failed to switch network');\r\n        }\r\n      });\r\n    }\r\n  }, [active, library, inputToken, outputToken]);\r\n\r\n  useEffect(() => {\r\n    calculateOutputAmount();\r\n  }, [inputAmount, inputToken, outputToken, prices]);\r\n\r\n  const calculateOutputAmount = () => {\r\n    if (!inputAmount || !prices[inputToken] || !prices[outputToken]) {\r\n      setOutputAmount('0.0000');\r\n      return;\r\n    }\r\n    const inputValueUSD = parseFloat(inputAmount) * parseFloat(ethers.utils.formatUnits(prices[inputToken], 18));\r\n    const outputValue = inputValueUSD / parseFloat(ethers.utils.formatUnits(prices[outputToken], 18));\r\n    console.log('Calculation:', { inputAmount, inputToken, outputToken, inputValueUSD, outputValue });\r\n    setOutputAmount(outputValue.toFixed(6));\r\n  };\r\n\r\n  const handleInputTokenChange = (e) => {\r\n    const newInputToken = e.target.value;\r\n    setInputToken(newInputToken);\r\n    \r\n    // 입력 토큰이 변경되면 출력 토큰을 자동으로 조정합니다.\r\n    if (newInputToken === outputToken) {\r\n      const newOutputToken = Object.keys(TOKENS).find(token => token !== newInputToken);\r\n      setOutputToken(newOutputToken);\r\n    }\r\n\r\n    // 입력값 초기화\r\n    setInputAmount('');\r\n    setOutputAmount('0.0000');\r\n\r\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\r\n  };\r\n\r\n  const handleOutputTokenChange = (e) => {\r\n    const newOutputToken = e.target.value;\r\n    setOutputToken(newOutputToken);\r\n    \r\n    // 출력 토큰이 변경되면 입력 토큰을 자동으로 조정합니다.\r\n    if (newOutputToken === inputToken) {\r\n      const newInputToken = Object.keys(TOKENS).find(token => token !== newOutputToken);\r\n      setInputToken(newInputToken);\r\n    }\r\n\r\n    // 입력값 초기화\r\n    setInputAmount('');\r\n    setOutputAmount('0.0000');\r\n\r\n    // 네트워크 체크는 별도의 useEffect에서 처리합니다.\r\n  };\r\n\r\n  const handleExchange = async () => {\r\n    if (!await checkAndSwitchNetwork()) {\r\n      return;\r\n    }\r\n\r\n    if (!active || !library) {\r\n      setErrorMessage('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(inputAmount) > parseFloat(balances[inputToken])) {\r\n      setErrorMessage('Insufficient balance');\r\n      return;\r\n    }\r\n\r\n    setErrorMessage('');\r\n    setIsExchanging(true);\r\n\r\n    try {\r\n      // 교환 직전에 가격 업데이트 (프론트엔드에서만)\r\n      const latestPrices = await fetchPrices();\r\n      setPrices(latestPrices);\r\n\r\n      const signer = library.getSigner();\r\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n\r\n      let tx;\r\n      if (inputToken === 'ETH') {\r\n        tx = await contract.exchangeETHForToken(TOKENS[outputToken].address, {\r\n          value: ethers.utils.parseEther(inputAmount)\r\n        });\r\n      } else if (outputToken === 'ETH') {\r\n        // ETH로 교환하는 경우, 먼저 토큰 승인이 필요합니다.\r\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        await tokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\r\n        \r\n        tx = await contract.exchangeTokenForETH(\r\n          TOKENS[inputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      } else {\r\n        // 토큰 간 교환의 경우도 승인이 필요합니다.\r\n        const tokenContract = new ethers.Contract(TOKENS[inputToken].address, ERC20_ABI, signer);\r\n        await tokenContract.approve(CONTRACT_ADDRESS, ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals));\r\n        \r\n        tx = await contract.exchangeTokens(\r\n          TOKENS[inputToken].address,\r\n          TOKENS[outputToken].address,\r\n          ethers.utils.parseUnits(inputAmount, TOKENS[inputToken].decimals)\r\n        );\r\n      }\r\n\r\n      await tx.wait();\r\n      alert('Exchange successful!');\r\n      await updateBalances();\r\n    } catch (error) {\r\n      console.error('Exchange failed:', error);\r\n      if (error.code === 4001) {\r\n        setErrorMessage('Transaction was rejected. Please try again.');\r\n      } else if (error.message.includes('insufficient funds')) {\r\n        setErrorMessage('Insufficient funds for this transaction. Please check your balance.');\r\n      } else {\r\n        setErrorMessage('Exchange failed. Please try again or contact support if the issue persists.');\r\n      }\r\n    } finally {\r\n      setIsExchanging(false);\r\n    }\r\n  };\r\n\r\n  const setMaxAmount = () => {\r\n    if (inputToken === 'ETH') {\r\n      // ETH의 경우 가스비를 위해 약간의 여유를 둡니다.\r\n      const maxAmount = parseFloat(balances[inputToken]) - 0.01;\r\n      setInputAmount(maxAmount > 0 ? maxAmount.toString() : '0');\r\n    } else {\r\n      setInputAmount(balances[inputToken]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"exchange-container\">\r\n      <h2>Swap</h2>\r\n      <div className=\"swap-box\">\r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={inputToken} \r\n              onChange={handleInputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={inputAmount}\r\n            onChange={(e) => {\r\n              setInputAmount(e.target.value);\r\n              setError('');\r\n            }}\r\n            placeholder=\"0.0\"\r\n          />\r\n          <button onClick={setMaxAmount} className=\"max-button\">MAX</button>\r\n        </div>\r\n        <p className=\"balance\">Balance: {active ? parseFloat(balances[inputToken]).toFixed(4) : '0.0000'} {inputToken}</p>\r\n        \r\n        <div className=\"swap-icon\">↓</div>\r\n        \r\n        <div className=\"token-input\">\r\n          <div className=\"token-select\">\r\n            <select \r\n              value={outputToken} \r\n              onChange={handleOutputTokenChange}\r\n            >\r\n              {Object.keys(TOKENS).filter(token => token !== inputToken).map(token => (\r\n                <option key={token} value={token}>{TOKENS[token].name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            value={outputAmount || '0.0000'}\r\n            readOnly\r\n            placeholder=\"0.0000\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      \r\n      <button \r\n        onClick={handleExchange} \r\n        disabled={!active || !inputAmount || parseFloat(inputAmount) > parseFloat(balances[inputToken]) || isExchanging}\r\n        className=\"swap-button\"\r\n      >\r\n        {isExchanging ? 'Exchanging...' : 'Swap'}\r\n      </button>\r\n      \r\n      <p className=\"price-update\">Last price update: {new Date(lastPriceUpdate).toLocaleTimeString()}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenExchange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}